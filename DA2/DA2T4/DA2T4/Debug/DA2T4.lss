
DA2T4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000dc  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000008d  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c9  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000159  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000064d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
unsigned char num = 0;// Set num to 0, counting Variable
unsigned char byfive = 0;// Set byfive to 0, counting Variable

int main(void)
{
	DDRB = 0xFF;// Activate all PORTB Pins
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x31;// Activate PORTC Pins 0, 4, 5
  aa:	81 e3       	ldi	r24, 0x31	; 49
  ac:	87 b9       	out	0x07, r24	; 7
	OCR1A = 0x0F42;// When using Chip on breadboard: TCNT1 = 0x079E, 1950
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	90 93 89 00 	sts	0x0089, r25
  b6:	80 93 88 00 	sts	0x0088, r24
				//When using Xplained Mini board: OCR1A = 0x0F42, 3906
	TCCR1A = 0x0;//CTC Mode
  ba:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0D;//1024 Prescaler
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A); //Enable Timer1 compare interrupt
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	80 93 6f 00 	sts	0x006F, r24
	sei (); // Enable global interrupt
  ca:	78 94       	sei
    while (1) //Infinite loop
    {		
    }
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x26>

000000ce <__vector_11>:
	
return 0;
}

ISR (TIMER1_COMPA_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25

	PORTC ^= a << PORTC0;// XOR PORTC.0 with a to toggle on and off
  dc:	98 b1       	in	r25, 0x08	; 8
  de:	80 91 00 01 	lds	r24, 0x0100
  e2:	89 27       	eor	r24, r25
  e4:	88 b9       	out	0x08, r24	; 8
	if ((PORTC % 2) == 1) //
  e6:	40 9b       	sbis	0x08, 0	; 8
  e8:	26 c0       	rjmp	.+76     	; 0x136 <__vector_11+0x68>
	{
		num++;// Increase num by 1
  ea:	80 91 03 01 	lds	r24, 0x0103
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 03 01 	sts	0x0103, r24
		byfive++;// Increase byfive by 1
  f4:	90 91 02 01 	lds	r25, 0x0102
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	90 93 02 01 	sts	0x0102, r25
		PORTB = num;// Copy the value in num into PORTB
  fe:	85 b9       	out	0x05, r24	; 5
			
		if (byfive == 5)// Compare byfive with 5
 100:	80 91 02 01 	lds	r24, 0x0102
 104:	85 30       	cpi	r24, 0x05	; 5
 106:	21 f4       	brne	.+8      	; 0x110 <__vector_11+0x42>
		{
			PORTC |= 1 << PORTC4;// Set PORTC.4 to 1
 108:	44 9a       	sbi	0x08, 4	; 8
			PORTC &= 0 << PORTC5;// Set PORTC.5 to 0
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	18 b8       	out	0x08, r1	; 8
 10e:	13 c0       	rjmp	.+38     	; 0x136 <__vector_11+0x68>
		}else
		if (byfive == 10)// Compare byfive with 10
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	21 f4       	brne	.+8      	; 0x11c <__vector_11+0x4e>
		{
			PORTC &= 0 << PORTC4;// Set PORTC.4 to 0
 114:	88 b1       	in	r24, 0x08	; 8
 116:	18 b8       	out	0x08, r1	; 8
			PORTC |= 1 << PORTC5;// Set PORTC.5 to 1
 118:	45 9a       	sbi	0x08, 5	; 8
 11a:	0d c0       	rjmp	.+26     	; 0x136 <__vector_11+0x68>
		}else
		if (byfive == 15)// Compare byfive with 15
 11c:	8f 30       	cpi	r24, 0x0F	; 15
 11e:	19 f4       	brne	.+6      	; 0x126 <__vector_11+0x58>
		{
			PORTC |= 1 << PORTC4;// Set PORT.4 to 1
 120:	44 9a       	sbi	0x08, 4	; 8
			PORTC |= 1 << PORTC5;// Set PORT.5 to 1
 122:	45 9a       	sbi	0x08, 5	; 8
 124:	08 c0       	rjmp	.+16     	; 0x136 <__vector_11+0x68>
		}else
		if (byfive == 20)// Compare byfive with 20
 126:	84 31       	cpi	r24, 0x14	; 20
 128:	31 f4       	brne	.+12     	; 0x136 <__vector_11+0x68>
		{
			byfive = 0;// Reset byfive to 0
 12a:	10 92 02 01 	sts	0x0102, r1
			PORTC &= 0 << PORTC4;// Set PORT.4 to 0
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	18 b8       	out	0x08, r1	; 8
			PORTC &= 0 << PORTC5;// Set PORT.5 to 0
 132:	88 b1       	in	r24, 0x08	; 8
 134:	18 b8       	out	0x08, r1	; 8
		}
	}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
