
DA2T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000fd  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b6  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c9  00000000  00000000  0000037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <DELAY>:

int DELAY(int b)
{
	
	int a = 0x01;
	TCNT1 = 0xF862;
  80:	22 e6       	ldi	r18, 0x62	; 98
  82:	38 ef       	ldi	r19, 0xF8	; 248
  84:	30 93 85 00 	sts	0x0085, r19
  88:	20 93 84 00 	sts	0x0084, r18
	TCCR1A = 0x0;
  8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x05;
  90:	25 e0       	ldi	r18, 0x05	; 5
  92:	20 93 81 00 	sts	0x0081, r18
	
	while ((TIFR1 & (1<<TOV1)) == 0)
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <DELAY+0x16>
	{		
	}
	
	b = a ^ b;
	TIFR1 |= 1 << 0;
  9a:	b0 9a       	sbi	0x16, 0	; 22
	}else
	{
		PORTC1 << 1;
	}
return b;	
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	82 27       	eor	r24, r18
  a0:	08 95       	ret

000000a2 <main>:
int DELAY(int);


int main(void)
{
	DDRB = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x31;
  a6:	81 e3       	ldi	r24, 0x31	; 49
  a8:	87 b9       	out	0x07, r24	; 7
	int b = 0x00;
	int num = 0x0;
	int byfive = 0x0;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	DDRB = 0xFF;
	DDRC = 0x31;
	int b = 0x00;
	int num = 0x0;
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
	DDRB = 0xFF;
	DDRC = 0x31;
	int b = 0x00;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
				PORTC4 << 1;
				PORTC5 << 1;				
			}
			if (byfive == 20)
			{
				byfive = 0;
  b6:	e1 2c       	mov	r14, r1
  b8:	f1 2c       	mov	r15, r1
	int byfive = 0x0;
	//unsigned char k;
 
    while (1) 
    {		
		b = DELAY(b);
  ba:	0e 94 40 00 	call	0x80	; 0x80 <DELAY>
		if (b == 1)
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x18>
		{
			num++;
  c4:	0f 5f       	subi	r16, 0xFF	; 255
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
			byfive++;
  c8:	21 96       	adiw	r28, 0x01	; 1
			PORTB = num;
  ca:	05 b9       	out	0x05, r16	; 5
				//k = 0x30;
				//k = k | b;
				PORTC4 << 1;
				PORTC5 << 1;				
			}
			if (byfive == 20)
  cc:	c4 31       	cpi	r28, 0x14	; 20
  ce:	d1 05       	cpc	r29, r1
  d0:	a1 f7       	brne	.-24     	; 0xba <main+0x18>
			{
				byfive = 0;
  d2:	ce 2d       	mov	r28, r14
  d4:	df 2d       	mov	r29, r15
  d6:	f1 cf       	rjmp	.-30     	; 0xba <main+0x18>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
