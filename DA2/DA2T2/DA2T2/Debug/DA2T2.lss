
DA2T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e9  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000098  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c7  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000152  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 00 	call	0xce	; 0xce <main>
  9e:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DELAY>:
return 0;
}

void DELAY()
{
	TCNT1 = 0xF862;
  a6:	82 e6       	ldi	r24, 0x62	; 98
  a8:	98 ef       	ldi	r25, 0xF8	; 248
  aa:	90 93 85 00 	sts	0x0085, r25
  ae:	80 93 84 00 	sts	0x0084, r24
	TCCR1A = 0x0;
  b2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x05;
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	80 93 81 00 	sts	0x0081, r24
	
	while ((TIFR1 & (1<<TOV1)) == 0)
  bc:	b0 9b       	sbis	0x16, 0	; 22
  be:	fe cf       	rjmp	.-4      	; 0xbc <DELAY+0x16>
	{		
	}
	
	//b = a ^ b;
	
	TIFR1 |= 1 << 0;
  c0:	b0 9a       	sbi	0x16, 0	; 22
	PORTC ^= a << PORTC0;
  c2:	98 b1       	in	r25, 0x08	; 8
  c4:	80 91 00 01 	lds	r24, 0x0100
  c8:	89 27       	eor	r24, r25
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	08 95       	ret

000000ce <main>:
unsigned char num = 0;
unsigned char byfive = 0;

int main(void)
{
	DDRB = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x31;
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	87 b9       	out	0x07, r24	; 7
	//unsigned char num = 0;
	//int byfive = 0;
	 
    while (1) 
    {		
		DELAY();
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <DELAY>
		if ((PORTC % 2) == 1)
  da:	40 9b       	sbis	0x08, 0	; 8
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <main+0x8>
		{
			num++;
  de:	80 91 03 01 	lds	r24, 0x0103
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 03 01 	sts	0x0103, r24
			byfive++;
  e8:	90 91 02 01 	lds	r25, 0x0102
  ec:	9f 5f       	subi	r25, 0xFF	; 255
  ee:	90 93 02 01 	sts	0x0102, r25
			PORTB = num;
  f2:	85 b9       	out	0x05, r24	; 5
			
			if (byfive == 5)
  f4:	80 91 02 01 	lds	r24, 0x0102
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	19 f4       	brne	.+6      	; 0x102 <main+0x34>
			{
				PORTC |= 1 << PORTC4;
  fc:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= 0 << PORTC5;			
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	18 b8       	out	0x08, r1	; 8
			}			
			if (byfive == 10)
 102:	80 91 02 01 	lds	r24, 0x0102
 106:	8a 30       	cpi	r24, 0x0A	; 10
 108:	19 f4       	brne	.+6      	; 0x110 <main+0x42>
			{
				PORTC &= 0 << PORTC4;
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	18 b8       	out	0x08, r1	; 8
				PORTC |= 1 << PORTC5;
 10e:	45 9a       	sbi	0x08, 5	; 8
			}
			if (byfive == 15)
 110:	80 91 02 01 	lds	r24, 0x0102
 114:	8f 30       	cpi	r24, 0x0F	; 15
 116:	11 f4       	brne	.+4      	; 0x11c <main+0x4e>
			{
				PORTC |= 1 << PORTC4;
 118:	44 9a       	sbi	0x08, 4	; 8
				PORTC |= 1 << PORTC5;				
 11a:	45 9a       	sbi	0x08, 5	; 8
			}
			if (byfive == 20)
 11c:	80 91 02 01 	lds	r24, 0x0102
 120:	84 31       	cpi	r24, 0x14	; 20
 122:	c9 f6       	brne	.-78     	; 0xd6 <main+0x8>
			{
				byfive = 0;
 124:	10 92 02 01 	sts	0x0102, r1
				PORTC &= 0 << PORTC4;
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	18 b8       	out	0x08, r1	; 8
				PORTC &= 0 << PORTC5;
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	18 b8       	out	0x08, r1	; 8
 130:	d2 cf       	rjmp	.-92     	; 0xd6 <main+0x8>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
