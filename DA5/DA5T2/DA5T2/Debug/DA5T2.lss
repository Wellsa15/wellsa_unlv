
DA5T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001eb  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014e  00000000  00000000  000008fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000150  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001bd  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a7  00000000  00000000  00000d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DUTY_DELAY>:
return 0;
}

void DUTY_DELAY(int DELAY)
{// Function to allow variable delay
	while(DELAY--)
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	41 f0       	breq	.+16     	; 0xa4 <DUTY_DELAY+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef ec       	ldi	r30, 0xCF	; 207
  96:	f7 e0       	ldi	r31, 0x07	; 7
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <DUTY_DELAY+0x8>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <DUTY_DELAY+0xe>
  9e:	00 00       	nop
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	c1 f7       	brne	.-16     	; 0x94 <DUTY_DELAY+0x4>
  a4:	08 95       	ret

000000a6 <ADCstart>:



void ADCstart()
{
	ADMUX = (0<<REFS1)| // Reference Selection Bits
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	80 93 7c 00 	sts	0x007C, r24
	(1<<REFS0)| //use AVcc as reference
	(0<<ADLAR)|	//ADC Left adjust Result
	(0<<MUX2)|	// Analog Channel Selection Bits
	(1<<MUX1)|	// ADC2 (PC2, PIN25)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|	//ADC Enable
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	80 93 7a 00 	sts	0x007A, r24
  b2:	08 95       	ret

000000b4 <main>:
		
	// Black = PD0
	// Red = PD1
	// Green = PD2
	// Blue = PD3
	DDRD = 0xFF; // set PORTD as output
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	
	ADCstart(); // initialize the ADC port
  b8:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCstart>

	while(1)
	{
		ADCvalue = 0;
		
		ADCSRA |= (1<<ADSC);// write one to ADSC bit to start conversion
  bc:	ca e7       	ldi	r28, 0x7A	; 122
  be:	d0 e0       	ldi	r29, 0x00	; 0
		while(ADCSRA & (1<<ADSC))// wait until conversion is complete
		{
		}
		ADCvalue = ADC;// save voltage
  c0:	08 e7       	ldi	r16, 0x78	; 120
  c2:	10 e0       	ldi	r17, 0x00	; 0
		ADCvalue = (ADCvalue*5.0)/1024;
		ADCvalue = ((ADCvalue/5.0)*100); // Calculate what percent of maximum voltage is recieved
		OFF_Time = 100 - ADCvalue; // Calculate off time
		
		PORTD = 0X66;// Cycle for magnets
  c4:	0f 2e       	mov	r0, r31
  c6:	f6 e6       	ldi	r31, 0x66	; 102
  c8:	af 2e       	mov	r10, r31
  ca:	f0 2d       	mov	r31, r0
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
		PORTD = 0xCC;// Cycle for magnets
  cc:	0f 2e       	mov	r0, r31
  ce:	fc ec       	ldi	r31, 0xCC	; 204
  d0:	bf 2e       	mov	r11, r31
  d2:	f0 2d       	mov	r31, r0
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
		PORTD = 0x99;// Cycle for magnets
  d4:	0f 2e       	mov	r0, r31
  d6:	f9 e9       	ldi	r31, 0x99	; 153
  d8:	cf 2e       	mov	r12, r31
  da:	f0 2d       	mov	r31, r0
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
		PORTD = 0x33;// Cycle for magnets
  dc:	0f 2e       	mov	r0, r31
  de:	f3 e3       	ldi	r31, 0x33	; 51
  e0:	df 2e       	mov	r13, r31
  e2:	f0 2d       	mov	r31, r0
	
	ADCstart(); // initialize the ADC port

	while(1)
	{
		ADCvalue = 0;
  e4:	10 92 00 01 	sts	0x0100, r1
  e8:	10 92 01 01 	sts	0x0101, r1
  ec:	10 92 02 01 	sts	0x0102, r1
  f0:	10 92 03 01 	sts	0x0103, r1
		
		ADCSRA |= (1<<ADSC);// write one to ADSC bit to start conversion
  f4:	88 81       	ld	r24, Y
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	88 83       	st	Y, r24
		while(ADCSRA & (1<<ADSC))// wait until conversion is complete
  fa:	88 81       	ld	r24, Y
  fc:	86 fd       	sbrc	r24, 6
  fe:	fd cf       	rjmp	.-6      	; 0xfa <main+0x46>
		{
		}
		ADCvalue = ADC;// save voltage
 100:	f8 01       	movw	r30, r16
 102:	60 81       	ld	r22, Z
 104:	71 81       	ldd	r23, Z+1	; 0x01
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 01 02 	call	0x402	; 0x402 <__floatunsisf>
 10e:	60 93 00 01 	sts	0x0100, r22
 112:	70 93 01 01 	sts	0x0101, r23
 116:	80 93 02 01 	sts	0x0102, r24
 11a:	90 93 03 01 	sts	0x0103, r25
		ADCvalue = (ADCvalue*5.0)/1024;
 11e:	60 91 00 01 	lds	r22, 0x0100
 122:	70 91 01 01 	lds	r23, 0x0101
 126:	80 91 02 01 	lds	r24, 0x0102
 12a:	90 91 03 01 	lds	r25, 0x0103
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 ea       	ldi	r20, 0xA0	; 160
 134:	50 e4       	ldi	r21, 0x40	; 64
 136:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	5a e3       	ldi	r21, 0x3A	; 58
 142:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 146:	60 93 00 01 	sts	0x0100, r22
 14a:	70 93 01 01 	sts	0x0101, r23
 14e:	80 93 02 01 	sts	0x0102, r24
 152:	90 93 03 01 	sts	0x0103, r25
		ADCvalue = ((ADCvalue/5.0)*100); // Calculate what percent of maximum voltage is recieved
 156:	60 91 00 01 	lds	r22, 0x0100
 15a:	70 91 01 01 	lds	r23, 0x0101
 15e:	80 91 02 01 	lds	r24, 0x0102
 162:	90 91 03 01 	lds	r25, 0x0103
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 ea       	ldi	r20, 0xA0	; 160
 16c:	50 e4       	ldi	r21, 0x40	; 64
 16e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__divsf3>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 ec       	ldi	r20, 0xC8	; 200
 178:	52 e4       	ldi	r21, 0x42	; 66
 17a:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 17e:	60 93 00 01 	sts	0x0100, r22
 182:	70 93 01 01 	sts	0x0101, r23
 186:	80 93 02 01 	sts	0x0102, r24
 18a:	90 93 03 01 	sts	0x0103, r25
		OFF_Time = 100 - ADCvalue; // Calculate off time
 18e:	20 91 00 01 	lds	r18, 0x0100
 192:	30 91 01 01 	lds	r19, 0x0101
 196:	40 91 02 01 	lds	r20, 0x0102
 19a:	50 91 03 01 	lds	r21, 0x0103
		
		PORTD = 0X66;// Cycle for magnets
 19e:	ab b8       	out	0x0b, r10	; 11
		{
		}
		ADCvalue = ADC;// save voltage
		ADCvalue = (ADCvalue*5.0)/1024;
		ADCvalue = ((ADCvalue/5.0)*100); // Calculate what percent of maximum voltage is recieved
		OFF_Time = 100 - ADCvalue; // Calculate off time
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	88 ec       	ldi	r24, 0xC8	; 200
 1a6:	92 e4       	ldi	r25, 0x42	; 66
 1a8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__subsf3>
 1ac:	0e 94 cb 01 	call	0x396	; 0x396 <__fixsfsi>
		
		PORTD = 0X66;// Cycle for magnets
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
 1b0:	7b 01       	movw	r14, r22
 1b2:	ff ef       	ldi	r31, 0xFF	; 255
 1b4:	ef 1a       	sub	r14, r31
 1b6:	ff 0a       	sbc	r15, r31
 1b8:	c7 01       	movw	r24, r14
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
		PORTD = 0xCC;// Cycle for magnets
 1be:	bb b8       	out	0x0b, r11	; 11
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
 1c0:	c7 01       	movw	r24, r14
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
		PORTD = 0x99;// Cycle for magnets
 1c6:	cb b8       	out	0x0b, r12	; 11
		DUTY_DELAY(OFF_Time+1);// how long to wait to change magnets
 1c8:	c7 01       	movw	r24, r14
 1ca:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
		PORTD = 0x33;// Cycle for magnets
 1ce:	db b8       	out	0x0b, r13	; 11
		DUTY_DELAY(OFF_Time+1);
 1d0:	c7 01       	movw	r24, r14
 1d2:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
	}
 1d6:	86 cf       	rjmp	.-244    	; 0xe4 <main+0x30>

000001d8 <__subsf3>:
 1d8:	50 58       	subi	r21, 0x80	; 128

000001da <__addsf3>:
 1da:	bb 27       	eor	r27, r27
 1dc:	aa 27       	eor	r26, r26
 1de:	0e 94 04 01 	call	0x208	; 0x208 <__addsf3x>
 1e2:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__fp_round>
 1e6:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_pscA>
 1ea:	38 f0       	brcs	.+14     	; 0x1fa <__addsf3+0x20>
 1ec:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_pscB>
 1f0:	20 f0       	brcs	.+8      	; 0x1fa <__addsf3+0x20>
 1f2:	39 f4       	brne	.+14     	; 0x202 <__addsf3+0x28>
 1f4:	9f 3f       	cpi	r25, 0xFF	; 255
 1f6:	19 f4       	brne	.+6      	; 0x1fe <__addsf3+0x24>
 1f8:	26 f4       	brtc	.+8      	; 0x202 <__addsf3+0x28>
 1fa:	0c 94 44 02 	jmp	0x488	; 0x488 <__fp_nan>
 1fe:	0e f4       	brtc	.+2      	; 0x202 <__addsf3+0x28>
 200:	e0 95       	com	r30
 202:	e7 fb       	bst	r30, 7
 204:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_inf>

00000208 <__addsf3x>:
 208:	e9 2f       	mov	r30, r25
 20a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_split3>
 20e:	58 f3       	brcs	.-42     	; 0x1e6 <__addsf3+0xc>
 210:	ba 17       	cp	r27, r26
 212:	62 07       	cpc	r22, r18
 214:	73 07       	cpc	r23, r19
 216:	84 07       	cpc	r24, r20
 218:	95 07       	cpc	r25, r21
 21a:	20 f0       	brcs	.+8      	; 0x224 <__addsf3x+0x1c>
 21c:	79 f4       	brne	.+30     	; 0x23c <__addsf3x+0x34>
 21e:	a6 f5       	brtc	.+104    	; 0x288 <__addsf3x+0x80>
 220:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_zero>
 224:	0e f4       	brtc	.+2      	; 0x228 <__addsf3x+0x20>
 226:	e0 95       	com	r30
 228:	0b 2e       	mov	r0, r27
 22a:	ba 2f       	mov	r27, r26
 22c:	a0 2d       	mov	r26, r0
 22e:	0b 01       	movw	r0, r22
 230:	b9 01       	movw	r22, r18
 232:	90 01       	movw	r18, r0
 234:	0c 01       	movw	r0, r24
 236:	ca 01       	movw	r24, r20
 238:	a0 01       	movw	r20, r0
 23a:	11 24       	eor	r1, r1
 23c:	ff 27       	eor	r31, r31
 23e:	59 1b       	sub	r21, r25
 240:	99 f0       	breq	.+38     	; 0x268 <__addsf3x+0x60>
 242:	59 3f       	cpi	r21, 0xF9	; 249
 244:	50 f4       	brcc	.+20     	; 0x25a <__addsf3x+0x52>
 246:	50 3e       	cpi	r21, 0xE0	; 224
 248:	68 f1       	brcs	.+90     	; 0x2a4 <__addsf3x+0x9c>
 24a:	1a 16       	cp	r1, r26
 24c:	f0 40       	sbci	r31, 0x00	; 0
 24e:	a2 2f       	mov	r26, r18
 250:	23 2f       	mov	r18, r19
 252:	34 2f       	mov	r19, r20
 254:	44 27       	eor	r20, r20
 256:	58 5f       	subi	r21, 0xF8	; 248
 258:	f3 cf       	rjmp	.-26     	; 0x240 <__addsf3x+0x38>
 25a:	46 95       	lsr	r20
 25c:	37 95       	ror	r19
 25e:	27 95       	ror	r18
 260:	a7 95       	ror	r26
 262:	f0 40       	sbci	r31, 0x00	; 0
 264:	53 95       	inc	r21
 266:	c9 f7       	brne	.-14     	; 0x25a <__addsf3x+0x52>
 268:	7e f4       	brtc	.+30     	; 0x288 <__addsf3x+0x80>
 26a:	1f 16       	cp	r1, r31
 26c:	ba 0b       	sbc	r27, r26
 26e:	62 0b       	sbc	r22, r18
 270:	73 0b       	sbc	r23, r19
 272:	84 0b       	sbc	r24, r20
 274:	ba f0       	brmi	.+46     	; 0x2a4 <__addsf3x+0x9c>
 276:	91 50       	subi	r25, 0x01	; 1
 278:	a1 f0       	breq	.+40     	; 0x2a2 <__addsf3x+0x9a>
 27a:	ff 0f       	add	r31, r31
 27c:	bb 1f       	adc	r27, r27
 27e:	66 1f       	adc	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	c2 f7       	brpl	.-16     	; 0x276 <__addsf3x+0x6e>
 286:	0e c0       	rjmp	.+28     	; 0x2a4 <__addsf3x+0x9c>
 288:	ba 0f       	add	r27, r26
 28a:	62 1f       	adc	r22, r18
 28c:	73 1f       	adc	r23, r19
 28e:	84 1f       	adc	r24, r20
 290:	48 f4       	brcc	.+18     	; 0x2a4 <__addsf3x+0x9c>
 292:	87 95       	ror	r24
 294:	77 95       	ror	r23
 296:	67 95       	ror	r22
 298:	b7 95       	ror	r27
 29a:	f7 95       	ror	r31
 29c:	9e 3f       	cpi	r25, 0xFE	; 254
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <__addsf3x+0x9a>
 2a0:	b0 cf       	rjmp	.-160    	; 0x202 <__addsf3+0x28>
 2a2:	93 95       	inc	r25
 2a4:	88 0f       	add	r24, r24
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__addsf3x+0xa2>
 2a8:	99 27       	eor	r25, r25
 2aa:	ee 0f       	add	r30, r30
 2ac:	97 95       	ror	r25
 2ae:	87 95       	ror	r24
 2b0:	08 95       	ret

000002b2 <__divsf3>:
 2b2:	0e 94 6d 01 	call	0x2da	; 0x2da <__divsf3x>
 2b6:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__fp_round>
 2ba:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_pscB>
 2be:	58 f0       	brcs	.+22     	; 0x2d6 <__divsf3+0x24>
 2c0:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_pscA>
 2c4:	40 f0       	brcs	.+16     	; 0x2d6 <__divsf3+0x24>
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <__divsf3+0x20>
 2c8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <__divsf3+0x24>
 2cc:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_inf>
 2d0:	51 11       	cpse	r21, r1
 2d2:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_szero>
 2d6:	0c 94 44 02 	jmp	0x488	; 0x488 <__fp_nan>

000002da <__divsf3x>:
 2da:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_split3>
 2de:	68 f3       	brcs	.-38     	; 0x2ba <__divsf3+0x8>

000002e0 <__divsf3_pse>:
 2e0:	99 23       	and	r25, r25
 2e2:	b1 f3       	breq	.-20     	; 0x2d0 <__divsf3+0x1e>
 2e4:	55 23       	and	r21, r21
 2e6:	91 f3       	breq	.-28     	; 0x2cc <__divsf3+0x1a>
 2e8:	95 1b       	sub	r25, r21
 2ea:	55 0b       	sbc	r21, r21
 2ec:	bb 27       	eor	r27, r27
 2ee:	aa 27       	eor	r26, r26
 2f0:	62 17       	cp	r22, r18
 2f2:	73 07       	cpc	r23, r19
 2f4:	84 07       	cpc	r24, r20
 2f6:	38 f0       	brcs	.+14     	; 0x306 <__divsf3_pse+0x26>
 2f8:	9f 5f       	subi	r25, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	44 1f       	adc	r20, r20
 302:	aa 1f       	adc	r26, r26
 304:	a9 f3       	breq	.-22     	; 0x2f0 <__divsf3_pse+0x10>
 306:	35 d0       	rcall	.+106    	; 0x372 <__divsf3_pse+0x92>
 308:	0e 2e       	mov	r0, r30
 30a:	3a f0       	brmi	.+14     	; 0x31a <__divsf3_pse+0x3a>
 30c:	e0 e8       	ldi	r30, 0x80	; 128
 30e:	32 d0       	rcall	.+100    	; 0x374 <__divsf3_pse+0x94>
 310:	91 50       	subi	r25, 0x01	; 1
 312:	50 40       	sbci	r21, 0x00	; 0
 314:	e6 95       	lsr	r30
 316:	00 1c       	adc	r0, r0
 318:	ca f7       	brpl	.-14     	; 0x30c <__divsf3_pse+0x2c>
 31a:	2b d0       	rcall	.+86     	; 0x372 <__divsf3_pse+0x92>
 31c:	fe 2f       	mov	r31, r30
 31e:	29 d0       	rcall	.+82     	; 0x372 <__divsf3_pse+0x92>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	bb 1f       	adc	r27, r27
 328:	26 17       	cp	r18, r22
 32a:	37 07       	cpc	r19, r23
 32c:	48 07       	cpc	r20, r24
 32e:	ab 07       	cpc	r26, r27
 330:	b0 e8       	ldi	r27, 0x80	; 128
 332:	09 f0       	breq	.+2      	; 0x336 <__divsf3_pse+0x56>
 334:	bb 0b       	sbc	r27, r27
 336:	80 2d       	mov	r24, r0
 338:	bf 01       	movw	r22, r30
 33a:	ff 27       	eor	r31, r31
 33c:	93 58       	subi	r25, 0x83	; 131
 33e:	5f 4f       	sbci	r21, 0xFF	; 255
 340:	3a f0       	brmi	.+14     	; 0x350 <__divsf3_pse+0x70>
 342:	9e 3f       	cpi	r25, 0xFE	; 254
 344:	51 05       	cpc	r21, r1
 346:	78 f0       	brcs	.+30     	; 0x366 <__divsf3_pse+0x86>
 348:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_inf>
 34c:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_szero>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	e4 f3       	brlt	.-8      	; 0x34c <__divsf3_pse+0x6c>
 354:	98 3e       	cpi	r25, 0xE8	; 232
 356:	d4 f3       	brlt	.-12     	; 0x34c <__divsf3_pse+0x6c>
 358:	86 95       	lsr	r24
 35a:	77 95       	ror	r23
 35c:	67 95       	ror	r22
 35e:	b7 95       	ror	r27
 360:	f7 95       	ror	r31
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	c9 f7       	brne	.-14     	; 0x358 <__divsf3_pse+0x78>
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	bb 1f       	adc	r27, r27
 37c:	62 17       	cp	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	ba 07       	cpc	r27, r26
 384:	20 f0       	brcs	.+8      	; 0x38e <__divsf3_pse+0xae>
 386:	62 1b       	sub	r22, r18
 388:	73 0b       	sbc	r23, r19
 38a:	84 0b       	sbc	r24, r20
 38c:	ba 0b       	sbc	r27, r26
 38e:	ee 1f       	adc	r30, r30
 390:	88 f7       	brcc	.-30     	; 0x374 <__divsf3_pse+0x94>
 392:	e0 95       	com	r30
 394:	08 95       	ret

00000396 <__fixsfsi>:
 396:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fixunssfsi>
 39a:	68 94       	set
 39c:	b1 11       	cpse	r27, r1
 39e:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_szero>
 3a2:	08 95       	ret

000003a4 <__fixunssfsi>:
 3a4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__fp_splitA>
 3a8:	88 f0       	brcs	.+34     	; 0x3cc <__fixunssfsi+0x28>
 3aa:	9f 57       	subi	r25, 0x7F	; 127
 3ac:	98 f0       	brcs	.+38     	; 0x3d4 <__fixunssfsi+0x30>
 3ae:	b9 2f       	mov	r27, r25
 3b0:	99 27       	eor	r25, r25
 3b2:	b7 51       	subi	r27, 0x17	; 23
 3b4:	b0 f0       	brcs	.+44     	; 0x3e2 <__fixunssfsi+0x3e>
 3b6:	e1 f0       	breq	.+56     	; 0x3f0 <__fixunssfsi+0x4c>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	1a f0       	brmi	.+6      	; 0x3c8 <__fixunssfsi+0x24>
 3c2:	ba 95       	dec	r27
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__fixunssfsi+0x14>
 3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <__fixunssfsi+0x4c>
 3c8:	b1 30       	cpi	r27, 0x01	; 1
 3ca:	91 f0       	breq	.+36     	; 0x3f0 <__fixunssfsi+0x4c>
 3cc:	0e 94 88 02 	call	0x510	; 0x510 <__fp_zero>
 3d0:	b1 e0       	ldi	r27, 0x01	; 1
 3d2:	08 95       	ret
 3d4:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_zero>
 3d8:	67 2f       	mov	r22, r23
 3da:	78 2f       	mov	r23, r24
 3dc:	88 27       	eor	r24, r24
 3de:	b8 5f       	subi	r27, 0xF8	; 248
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <__fixunssfsi+0x4c>
 3e2:	b9 3f       	cpi	r27, 0xF9	; 249
 3e4:	cc f3       	brlt	.-14     	; 0x3d8 <__fixunssfsi+0x34>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b3 95       	inc	r27
 3ee:	d9 f7       	brne	.-10     	; 0x3e6 <__fixunssfsi+0x42>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__fixunssfsi+0x5c>
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__floatunsisf>:
 402:	e8 94       	clt
 404:	09 c0       	rjmp	.+18     	; 0x418 <__floatsisf+0x12>

00000406 <__floatsisf>:
 406:	97 fb       	bst	r25, 7
 408:	3e f4       	brtc	.+14     	; 0x418 <__floatsisf+0x12>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	99 23       	and	r25, r25
 41a:	a9 f0       	breq	.+42     	; 0x446 <__floatsisf+0x40>
 41c:	f9 2f       	mov	r31, r25
 41e:	96 e9       	ldi	r25, 0x96	; 150
 420:	bb 27       	eor	r27, r27
 422:	93 95       	inc	r25
 424:	f6 95       	lsr	r31
 426:	87 95       	ror	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f1 11       	cpse	r31, r1
 430:	f8 cf       	rjmp	.-16     	; 0x422 <__floatsisf+0x1c>
 432:	fa f4       	brpl	.+62     	; 0x472 <__floatsisf+0x6c>
 434:	bb 0f       	add	r27, r27
 436:	11 f4       	brne	.+4      	; 0x43c <__floatsisf+0x36>
 438:	60 ff       	sbrs	r22, 0
 43a:	1b c0       	rjmp	.+54     	; 0x472 <__floatsisf+0x6c>
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	16 c0       	rjmp	.+44     	; 0x472 <__floatsisf+0x6c>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <__floatsisf+0x48>
 44a:	96 e9       	ldi	r25, 0x96	; 150
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__floatsisf+0x6a>
 44e:	77 23       	and	r23, r23
 450:	21 f0       	breq	.+8      	; 0x45a <__floatsisf+0x54>
 452:	9e e8       	ldi	r25, 0x8E	; 142
 454:	87 2f       	mov	r24, r23
 456:	76 2f       	mov	r23, r22
 458:	05 c0       	rjmp	.+10     	; 0x464 <__floatsisf+0x5e>
 45a:	66 23       	and	r22, r22
 45c:	71 f0       	breq	.+28     	; 0x47a <__floatsisf+0x74>
 45e:	96 e8       	ldi	r25, 0x86	; 134
 460:	86 2f       	mov	r24, r22
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	2a f0       	brmi	.+10     	; 0x472 <__floatsisf+0x6c>
 468:	9a 95       	dec	r25
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	da f7       	brpl	.-10     	; 0x468 <__floatsisf+0x62>
 472:	88 0f       	add	r24, r24
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <__fp_inf>:
 47c:	97 f9       	bld	r25, 7
 47e:	9f 67       	ori	r25, 0x7F	; 127
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	08 95       	ret

00000488 <__fp_nan>:
 488:	9f ef       	ldi	r25, 0xFF	; 255
 48a:	80 ec       	ldi	r24, 0xC0	; 192
 48c:	08 95       	ret

0000048e <__fp_pscA>:
 48e:	00 24       	eor	r0, r0
 490:	0a 94       	dec	r0
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	18 06       	cpc	r1, r24
 498:	09 06       	cpc	r0, r25
 49a:	08 95       	ret

0000049c <__fp_pscB>:
 49c:	00 24       	eor	r0, r0
 49e:	0a 94       	dec	r0
 4a0:	12 16       	cp	r1, r18
 4a2:	13 06       	cpc	r1, r19
 4a4:	14 06       	cpc	r1, r20
 4a6:	05 06       	cpc	r0, r21
 4a8:	08 95       	ret

000004aa <__fp_round>:
 4aa:	09 2e       	mov	r0, r25
 4ac:	03 94       	inc	r0
 4ae:	00 0c       	add	r0, r0
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__fp_round+0xc>
 4b2:	88 23       	and	r24, r24
 4b4:	52 f0       	brmi	.+20     	; 0x4ca <__fp_round+0x20>
 4b6:	bb 0f       	add	r27, r27
 4b8:	40 f4       	brcc	.+16     	; 0x4ca <__fp_round+0x20>
 4ba:	bf 2b       	or	r27, r31
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__fp_round+0x18>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__fp_round+0x20>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__fp_split3>:
 4cc:	57 fd       	sbrc	r21, 7
 4ce:	90 58       	subi	r25, 0x80	; 128
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	59 f0       	breq	.+22     	; 0x4ec <__fp_splitA+0x10>
 4d6:	5f 3f       	cpi	r21, 0xFF	; 255
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__fp_splitA+0x1a>
 4da:	47 95       	ror	r20

000004dc <__fp_splitA>:
 4dc:	88 0f       	add	r24, r24
 4de:	97 fb       	bst	r25, 7
 4e0:	99 1f       	adc	r25, r25
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_splitA+0x20>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	79 f0       	breq	.+30     	; 0x506 <__fp_splitA+0x2a>
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	f2 cf       	rjmp	.-28     	; 0x4da <__fp_split3+0xe>
 4f6:	46 95       	lsr	r20
 4f8:	f1 df       	rcall	.-30     	; 0x4dc <__fp_splitA>
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__fp_splitA+0x30>
 4fc:	16 16       	cp	r1, r22
 4fe:	17 06       	cpc	r1, r23
 500:	18 06       	cpc	r1, r24
 502:	99 1f       	adc	r25, r25
 504:	f1 cf       	rjmp	.-30     	; 0x4e8 <__fp_splitA+0xc>
 506:	86 95       	lsr	r24
 508:	71 05       	cpc	r23, r1
 50a:	61 05       	cpc	r22, r1
 50c:	08 94       	sec
 50e:	08 95       	ret

00000510 <__fp_zero>:
 510:	e8 94       	clt

00000512 <__fp_szero>:
 512:	bb 27       	eor	r27, r27
 514:	66 27       	eor	r22, r22
 516:	77 27       	eor	r23, r23
 518:	cb 01       	movw	r24, r22
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__mulsf3>:
 51e:	0e 94 a2 02 	call	0x544	; 0x544 <__mulsf3x>
 522:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__fp_round>
 526:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_pscA>
 52a:	38 f0       	brcs	.+14     	; 0x53a <__mulsf3+0x1c>
 52c:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_pscB>
 530:	20 f0       	brcs	.+8      	; 0x53a <__mulsf3+0x1c>
 532:	95 23       	and	r25, r21
 534:	11 f0       	breq	.+4      	; 0x53a <__mulsf3+0x1c>
 536:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_inf>
 53a:	0c 94 44 02 	jmp	0x488	; 0x488 <__fp_nan>
 53e:	11 24       	eor	r1, r1
 540:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_szero>

00000544 <__mulsf3x>:
 544:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_split3>
 548:	70 f3       	brcs	.-36     	; 0x526 <__mulsf3+0x8>

0000054a <__mulsf3_pse>:
 54a:	95 9f       	mul	r25, r21
 54c:	c1 f3       	breq	.-16     	; 0x53e <__mulsf3+0x20>
 54e:	95 0f       	add	r25, r21
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	55 1f       	adc	r21, r21
 554:	62 9f       	mul	r22, r18
 556:	f0 01       	movw	r30, r0
 558:	72 9f       	mul	r23, r18
 55a:	bb 27       	eor	r27, r27
 55c:	f0 0d       	add	r31, r0
 55e:	b1 1d       	adc	r27, r1
 560:	63 9f       	mul	r22, r19
 562:	aa 27       	eor	r26, r26
 564:	f0 0d       	add	r31, r0
 566:	b1 1d       	adc	r27, r1
 568:	aa 1f       	adc	r26, r26
 56a:	64 9f       	mul	r22, r20
 56c:	66 27       	eor	r22, r22
 56e:	b0 0d       	add	r27, r0
 570:	a1 1d       	adc	r26, r1
 572:	66 1f       	adc	r22, r22
 574:	82 9f       	mul	r24, r18
 576:	22 27       	eor	r18, r18
 578:	b0 0d       	add	r27, r0
 57a:	a1 1d       	adc	r26, r1
 57c:	62 1f       	adc	r22, r18
 57e:	73 9f       	mul	r23, r19
 580:	b0 0d       	add	r27, r0
 582:	a1 1d       	adc	r26, r1
 584:	62 1f       	adc	r22, r18
 586:	83 9f       	mul	r24, r19
 588:	a0 0d       	add	r26, r0
 58a:	61 1d       	adc	r22, r1
 58c:	22 1f       	adc	r18, r18
 58e:	74 9f       	mul	r23, r20
 590:	33 27       	eor	r19, r19
 592:	a0 0d       	add	r26, r0
 594:	61 1d       	adc	r22, r1
 596:	23 1f       	adc	r18, r19
 598:	84 9f       	mul	r24, r20
 59a:	60 0d       	add	r22, r0
 59c:	21 1d       	adc	r18, r1
 59e:	82 2f       	mov	r24, r18
 5a0:	76 2f       	mov	r23, r22
 5a2:	6a 2f       	mov	r22, r26
 5a4:	11 24       	eor	r1, r1
 5a6:	9f 57       	subi	r25, 0x7F	; 127
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	9a f0       	brmi	.+38     	; 0x5d2 <__mulsf3_pse+0x88>
 5ac:	f1 f0       	breq	.+60     	; 0x5ea <__mulsf3_pse+0xa0>
 5ae:	88 23       	and	r24, r24
 5b0:	4a f0       	brmi	.+18     	; 0x5c4 <__mulsf3_pse+0x7a>
 5b2:	ee 0f       	add	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	bb 1f       	adc	r27, r27
 5b8:	66 1f       	adc	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	91 50       	subi	r25, 0x01	; 1
 5c0:	50 40       	sbci	r21, 0x00	; 0
 5c2:	a9 f7       	brne	.-22     	; 0x5ae <__mulsf3_pse+0x64>
 5c4:	9e 3f       	cpi	r25, 0xFE	; 254
 5c6:	51 05       	cpc	r21, r1
 5c8:	80 f0       	brcs	.+32     	; 0x5ea <__mulsf3_pse+0xa0>
 5ca:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_inf>
 5ce:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_szero>
 5d2:	5f 3f       	cpi	r21, 0xFF	; 255
 5d4:	e4 f3       	brlt	.-8      	; 0x5ce <__mulsf3_pse+0x84>
 5d6:	98 3e       	cpi	r25, 0xE8	; 232
 5d8:	d4 f3       	brlt	.-12     	; 0x5ce <__mulsf3_pse+0x84>
 5da:	86 95       	lsr	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b7 95       	ror	r27
 5e2:	f7 95       	ror	r31
 5e4:	e7 95       	ror	r30
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	c1 f7       	brne	.-16     	; 0x5da <__mulsf3_pse+0x90>
 5ea:	fe 2b       	or	r31, r30
 5ec:	88 0f       	add	r24, r24
 5ee:	91 1d       	adc	r25, r1
 5f0:	96 95       	lsr	r25
 5f2:	87 95       	ror	r24
 5f4:	97 f9       	bld	r25, 7
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
