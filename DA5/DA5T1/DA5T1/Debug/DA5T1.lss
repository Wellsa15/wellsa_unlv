
DA5T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ee  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000015f  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ce  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DUTY_DELAY>:
return 0;
}

void DUTY_DELAY(int DELAY)
{// function to allow variable delays
	while(DELAY--)
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	41 f0       	breq	.+16     	; 0xa4 <DUTY_DELAY+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef ec       	ldi	r30, 0xCF	; 207
  96:	f7 e0       	ldi	r31, 0x07	; 7
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <DUTY_DELAY+0x8>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <DUTY_DELAY+0xe>
  9e:	00 00       	nop
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	c1 f7       	brne	.-16     	; 0x94 <DUTY_DELAY+0x4>
  a4:	08 95       	ret

000000a6 <ADCstart>:



void ADCstart()
{
	ADMUX = (0<<REFS1)| // Reference Selection Bits
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	80 93 7c 00 	sts	0x007C, r24
	(1<<REFS0)| //use AVcc as reference
	(0<<ADLAR)|	//ADC Left adjust Result
	(0<<MUX2)|	// Analog Channel Selection Bits
	(1<<MUX1)|	// ADC2 (PC2, PIN25)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|	//ADC Enable
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	80 93 7a 00 	sts	0x007A, r24
  b2:	08 95       	ret

000000b4 <main>:
int main(void)
{
	int On_Time;// variable for the On part of the duty cycle
	int OFF_Time;// variable for the Off part of the duty cycle
	
	DDRD |= (1<<6); // Turn on PORTD.6
  b4:	56 9a       	sbi	0x0a, 6	; 10
	PORTD = (1<<ENABLE); // Power signal to the DC motor
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	8b b9       	out	0x0b, r24	; 11
	
	ADCstart(); // initialize the ADC port
  ba:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCstart>
	
	while (1)
	{
		ADCvalue = 0; // reset potentiometer value

		ADCSRA |= (1<<ADSC);// write one to ADSC bit to start conversion
  be:	ca e7       	ldi	r28, 0x7A	; 122
  c0:	d0 e0       	ldi	r29, 0x00	; 0
		while(ADCSRA & (1<<ADSC))// wait until conversion is complete
		{
		}
		ADCvalue = ADC;// save voltage
  c2:	0f 2e       	mov	r0, r31
  c4:	f8 e7       	ldi	r31, 0x78	; 120
  c6:	ef 2e       	mov	r14, r31
  c8:	f1 2c       	mov	r15, r1
  ca:	f0 2d       	mov	r31, r0
		ADCvalue = ((ADCvalue/5.0)*100); // Calculate what percent of maximum voltage is received
		OFF_Time = 100 - (int)ADCvalue; // Calculate Off part of duty cycle
		On_Time = 100 - OFF_Time; // Calculate On part of duty cycle
		
		PORTD = PORTD | (1<<ENABLE); // Motor off
		DUTY_DELAY(OFF_Time-1);// How long the motor is off
  cc:	03 e6       	ldi	r16, 0x63	; 99
  ce:	10 e0       	ldi	r17, 0x00	; 0
	
	ADCstart(); // initialize the ADC port
	
	while (1)
	{
		ADCvalue = 0; // reset potentiometer value
  d0:	10 92 00 01 	sts	0x0100, r1
  d4:	10 92 01 01 	sts	0x0101, r1
  d8:	10 92 02 01 	sts	0x0102, r1
  dc:	10 92 03 01 	sts	0x0103, r1

		ADCSRA |= (1<<ADSC);// write one to ADSC bit to start conversion
  e0:	88 81       	ld	r24, Y
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	88 83       	st	Y, r24
		while(ADCSRA & (1<<ADSC))// wait until conversion is complete
  e6:	88 81       	ld	r24, Y
  e8:	86 fd       	sbrc	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x32>
		{
		}
		ADCvalue = ADC;// save voltage
  ec:	f7 01       	movw	r30, r14
  ee:	60 81       	ld	r22, Z
  f0:	71 81       	ldd	r23, Z+1	; 0x01
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__floatunsisf>
  fa:	60 93 00 01 	sts	0x0100, r22
  fe:	70 93 01 01 	sts	0x0101, r23
 102:	80 93 02 01 	sts	0x0102, r24
 106:	90 93 03 01 	sts	0x0103, r25
		ADCvalue = (ADCvalue*5.0)/1024; // Calculate Vin
 10a:	60 91 00 01 	lds	r22, 0x0100
 10e:	70 91 01 01 	lds	r23, 0x0101
 112:	80 91 02 01 	lds	r24, 0x0102
 116:	90 91 03 01 	lds	r25, 0x0103
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 ea       	ldi	r20, 0xA0	; 160
 120:	50 e4       	ldi	r21, 0x40	; 64
 122:	0e 94 0b 02 	call	0x416	; 0x416 <__mulsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e8       	ldi	r20, 0x80	; 128
 12c:	5a e3       	ldi	r21, 0x3A	; 58
 12e:	0e 94 0b 02 	call	0x416	; 0x416 <__mulsf3>
 132:	60 93 00 01 	sts	0x0100, r22
 136:	70 93 01 01 	sts	0x0101, r23
 13a:	80 93 02 01 	sts	0x0102, r24
 13e:	90 93 03 01 	sts	0x0103, r25
		ADCvalue = ((ADCvalue/5.0)*100); // Calculate what percent of maximum voltage is received
 142:	60 91 00 01 	lds	r22, 0x0100
 146:	70 91 01 01 	lds	r23, 0x0101
 14a:	80 91 02 01 	lds	r24, 0x0102
 14e:	90 91 03 01 	lds	r25, 0x0103
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 ea       	ldi	r20, 0xA0	; 160
 158:	50 e4       	ldi	r21, 0x40	; 64
 15a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__divsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	48 ec       	ldi	r20, 0xC8	; 200
 164:	52 e4       	ldi	r21, 0x42	; 66
 166:	0e 94 0b 02 	call	0x416	; 0x416 <__mulsf3>
 16a:	60 93 00 01 	sts	0x0100, r22
 16e:	70 93 01 01 	sts	0x0101, r23
 172:	80 93 02 01 	sts	0x0102, r24
 176:	90 93 03 01 	sts	0x0103, r25
		OFF_Time = 100 - (int)ADCvalue; // Calculate Off part of duty cycle
 17a:	60 91 00 01 	lds	r22, 0x0100
 17e:	70 91 01 01 	lds	r23, 0x0101
 182:	80 91 02 01 	lds	r24, 0x0102
 186:	90 91 03 01 	lds	r25, 0x0103
 18a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixsfsi>
 18e:	4b 01       	movw	r8, r22
 190:	5c 01       	movw	r10, r24
		On_Time = 100 - OFF_Time; // Calculate On part of duty cycle
		
		PORTD = PORTD | (1<<ENABLE); // Motor off
 192:	5e 9a       	sbi	0x0b, 6	; 11
		DUTY_DELAY(OFF_Time-1);// How long the motor is off
 194:	c8 01       	movw	r24, r16
 196:	88 19       	sub	r24, r8
 198:	99 09       	sbc	r25, r9
 19a:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
		PORTD = PORTD & (~(1<<ENABLE)); // Motor on
 19e:	5e 98       	cbi	0x0b, 6	; 11
		DUTY_DELAY(On_Time-1);// How long the motor is on
 1a0:	c4 01       	movw	r24, r8
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <DUTY_DELAY>
		
	}
 1a8:	93 cf       	rjmp	.-218    	; 0xd0 <main+0x1c>

000001aa <__divsf3>:
 1aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__divsf3x>
 1ae:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__fp_round>
 1b2:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_pscB>
 1b6:	58 f0       	brcs	.+22     	; 0x1ce <__divsf3+0x24>
 1b8:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_pscA>
 1bc:	40 f0       	brcs	.+16     	; 0x1ce <__divsf3+0x24>
 1be:	29 f4       	brne	.+10     	; 0x1ca <__divsf3+0x20>
 1c0:	5f 3f       	cpi	r21, 0xFF	; 255
 1c2:	29 f0       	breq	.+10     	; 0x1ce <__divsf3+0x24>
 1c4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_inf>
 1c8:	51 11       	cpse	r21, r1
 1ca:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_szero>
 1ce:	0c 94 c0 01 	jmp	0x380	; 0x380 <__fp_nan>

000001d2 <__divsf3x>:
 1d2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fp_split3>
 1d6:	68 f3       	brcs	.-38     	; 0x1b2 <__divsf3+0x8>

000001d8 <__divsf3_pse>:
 1d8:	99 23       	and	r25, r25
 1da:	b1 f3       	breq	.-20     	; 0x1c8 <__divsf3+0x1e>
 1dc:	55 23       	and	r21, r21
 1de:	91 f3       	breq	.-28     	; 0x1c4 <__divsf3+0x1a>
 1e0:	95 1b       	sub	r25, r21
 1e2:	55 0b       	sbc	r21, r21
 1e4:	bb 27       	eor	r27, r27
 1e6:	aa 27       	eor	r26, r26
 1e8:	62 17       	cp	r22, r18
 1ea:	73 07       	cpc	r23, r19
 1ec:	84 07       	cpc	r24, r20
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <__divsf3_pse+0x26>
 1f0:	9f 5f       	subi	r25, 0xFF	; 255
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	44 1f       	adc	r20, r20
 1fa:	aa 1f       	adc	r26, r26
 1fc:	a9 f3       	breq	.-22     	; 0x1e8 <__divsf3_pse+0x10>
 1fe:	35 d0       	rcall	.+106    	; 0x26a <__divsf3_pse+0x92>
 200:	0e 2e       	mov	r0, r30
 202:	3a f0       	brmi	.+14     	; 0x212 <__divsf3_pse+0x3a>
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	32 d0       	rcall	.+100    	; 0x26c <__divsf3_pse+0x94>
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	50 40       	sbci	r21, 0x00	; 0
 20c:	e6 95       	lsr	r30
 20e:	00 1c       	adc	r0, r0
 210:	ca f7       	brpl	.-14     	; 0x204 <__divsf3_pse+0x2c>
 212:	2b d0       	rcall	.+86     	; 0x26a <__divsf3_pse+0x92>
 214:	fe 2f       	mov	r31, r30
 216:	29 d0       	rcall	.+82     	; 0x26a <__divsf3_pse+0x92>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	bb 1f       	adc	r27, r27
 220:	26 17       	cp	r18, r22
 222:	37 07       	cpc	r19, r23
 224:	48 07       	cpc	r20, r24
 226:	ab 07       	cpc	r26, r27
 228:	b0 e8       	ldi	r27, 0x80	; 128
 22a:	09 f0       	breq	.+2      	; 0x22e <__divsf3_pse+0x56>
 22c:	bb 0b       	sbc	r27, r27
 22e:	80 2d       	mov	r24, r0
 230:	bf 01       	movw	r22, r30
 232:	ff 27       	eor	r31, r31
 234:	93 58       	subi	r25, 0x83	; 131
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	3a f0       	brmi	.+14     	; 0x248 <__divsf3_pse+0x70>
 23a:	9e 3f       	cpi	r25, 0xFE	; 254
 23c:	51 05       	cpc	r21, r1
 23e:	78 f0       	brcs	.+30     	; 0x25e <__divsf3_pse+0x86>
 240:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_inf>
 244:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_szero>
 248:	5f 3f       	cpi	r21, 0xFF	; 255
 24a:	e4 f3       	brlt	.-8      	; 0x244 <__divsf3_pse+0x6c>
 24c:	98 3e       	cpi	r25, 0xE8	; 232
 24e:	d4 f3       	brlt	.-12     	; 0x244 <__divsf3_pse+0x6c>
 250:	86 95       	lsr	r24
 252:	77 95       	ror	r23
 254:	67 95       	ror	r22
 256:	b7 95       	ror	r27
 258:	f7 95       	ror	r31
 25a:	9f 5f       	subi	r25, 0xFF	; 255
 25c:	c9 f7       	brne	.-14     	; 0x250 <__divsf3_pse+0x78>
 25e:	88 0f       	add	r24, r24
 260:	91 1d       	adc	r25, r1
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	97 f9       	bld	r25, 7
 268:	08 95       	ret
 26a:	e1 e0       	ldi	r30, 0x01	; 1
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	88 1f       	adc	r24, r24
 272:	bb 1f       	adc	r27, r27
 274:	62 17       	cp	r22, r18
 276:	73 07       	cpc	r23, r19
 278:	84 07       	cpc	r24, r20
 27a:	ba 07       	cpc	r27, r26
 27c:	20 f0       	brcs	.+8      	; 0x286 <__divsf3_pse+0xae>
 27e:	62 1b       	sub	r22, r18
 280:	73 0b       	sbc	r23, r19
 282:	84 0b       	sbc	r24, r20
 284:	ba 0b       	sbc	r27, r26
 286:	ee 1f       	adc	r30, r30
 288:	88 f7       	brcc	.-30     	; 0x26c <__divsf3_pse+0x94>
 28a:	e0 95       	com	r30
 28c:	08 95       	ret

0000028e <__fixsfsi>:
 28e:	0e 94 4e 01 	call	0x29c	; 0x29c <__fixunssfsi>
 292:	68 94       	set
 294:	b1 11       	cpse	r27, r1
 296:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_szero>
 29a:	08 95       	ret

0000029c <__fixunssfsi>:
 29c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_splitA>
 2a0:	88 f0       	brcs	.+34     	; 0x2c4 <__fixunssfsi+0x28>
 2a2:	9f 57       	subi	r25, 0x7F	; 127
 2a4:	98 f0       	brcs	.+38     	; 0x2cc <__fixunssfsi+0x30>
 2a6:	b9 2f       	mov	r27, r25
 2a8:	99 27       	eor	r25, r25
 2aa:	b7 51       	subi	r27, 0x17	; 23
 2ac:	b0 f0       	brcs	.+44     	; 0x2da <__fixunssfsi+0x3e>
 2ae:	e1 f0       	breq	.+56     	; 0x2e8 <__fixunssfsi+0x4c>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	1a f0       	brmi	.+6      	; 0x2c0 <__fixunssfsi+0x24>
 2ba:	ba 95       	dec	r27
 2bc:	c9 f7       	brne	.-14     	; 0x2b0 <__fixunssfsi+0x14>
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <__fixunssfsi+0x4c>
 2c0:	b1 30       	cpi	r27, 0x01	; 1
 2c2:	91 f0       	breq	.+36     	; 0x2e8 <__fixunssfsi+0x4c>
 2c4:	0e 94 04 02 	call	0x408	; 0x408 <__fp_zero>
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	08 95       	ret
 2cc:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_zero>
 2d0:	67 2f       	mov	r22, r23
 2d2:	78 2f       	mov	r23, r24
 2d4:	88 27       	eor	r24, r24
 2d6:	b8 5f       	subi	r27, 0xF8	; 248
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <__fixunssfsi+0x4c>
 2da:	b9 3f       	cpi	r27, 0xF9	; 249
 2dc:	cc f3       	brlt	.-14     	; 0x2d0 <__fixunssfsi+0x34>
 2de:	86 95       	lsr	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b3 95       	inc	r27
 2e6:	d9 f7       	brne	.-10     	; 0x2de <__fixunssfsi+0x42>
 2e8:	3e f4       	brtc	.+14     	; 0x2f8 <__fixunssfsi+0x5c>
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__floatunsisf>:
 2fa:	e8 94       	clt
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <__floatsisf+0x12>

000002fe <__floatsisf>:
 2fe:	97 fb       	bst	r25, 7
 300:	3e f4       	brtc	.+14     	; 0x310 <__floatsisf+0x12>
 302:	90 95       	com	r25
 304:	80 95       	com	r24
 306:	70 95       	com	r23
 308:	61 95       	neg	r22
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	99 23       	and	r25, r25
 312:	a9 f0       	breq	.+42     	; 0x33e <__floatsisf+0x40>
 314:	f9 2f       	mov	r31, r25
 316:	96 e9       	ldi	r25, 0x96	; 150
 318:	bb 27       	eor	r27, r27
 31a:	93 95       	inc	r25
 31c:	f6 95       	lsr	r31
 31e:	87 95       	ror	r24
 320:	77 95       	ror	r23
 322:	67 95       	ror	r22
 324:	b7 95       	ror	r27
 326:	f1 11       	cpse	r31, r1
 328:	f8 cf       	rjmp	.-16     	; 0x31a <__floatsisf+0x1c>
 32a:	fa f4       	brpl	.+62     	; 0x36a <__floatsisf+0x6c>
 32c:	bb 0f       	add	r27, r27
 32e:	11 f4       	brne	.+4      	; 0x334 <__floatsisf+0x36>
 330:	60 ff       	sbrs	r22, 0
 332:	1b c0       	rjmp	.+54     	; 0x36a <__floatsisf+0x6c>
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	16 c0       	rjmp	.+44     	; 0x36a <__floatsisf+0x6c>
 33e:	88 23       	and	r24, r24
 340:	11 f0       	breq	.+4      	; 0x346 <__floatsisf+0x48>
 342:	96 e9       	ldi	r25, 0x96	; 150
 344:	11 c0       	rjmp	.+34     	; 0x368 <__floatsisf+0x6a>
 346:	77 23       	and	r23, r23
 348:	21 f0       	breq	.+8      	; 0x352 <__floatsisf+0x54>
 34a:	9e e8       	ldi	r25, 0x8E	; 142
 34c:	87 2f       	mov	r24, r23
 34e:	76 2f       	mov	r23, r22
 350:	05 c0       	rjmp	.+10     	; 0x35c <__floatsisf+0x5e>
 352:	66 23       	and	r22, r22
 354:	71 f0       	breq	.+28     	; 0x372 <__floatsisf+0x74>
 356:	96 e8       	ldi	r25, 0x86	; 134
 358:	86 2f       	mov	r24, r22
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	2a f0       	brmi	.+10     	; 0x36a <__floatsisf+0x6c>
 360:	9a 95       	dec	r25
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	88 1f       	adc	r24, r24
 368:	da f7       	brpl	.-10     	; 0x360 <__floatsisf+0x62>
 36a:	88 0f       	add	r24, r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	97 f9       	bld	r25, 7
 372:	08 95       	ret

00000374 <__fp_inf>:
 374:	97 f9       	bld	r25, 7
 376:	9f 67       	ori	r25, 0x7F	; 127
 378:	80 e8       	ldi	r24, 0x80	; 128
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	08 95       	ret

00000380 <__fp_nan>:
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	80 ec       	ldi	r24, 0xC0	; 192
 384:	08 95       	ret

00000386 <__fp_pscA>:
 386:	00 24       	eor	r0, r0
 388:	0a 94       	dec	r0
 38a:	16 16       	cp	r1, r22
 38c:	17 06       	cpc	r1, r23
 38e:	18 06       	cpc	r1, r24
 390:	09 06       	cpc	r0, r25
 392:	08 95       	ret

00000394 <__fp_pscB>:
 394:	00 24       	eor	r0, r0
 396:	0a 94       	dec	r0
 398:	12 16       	cp	r1, r18
 39a:	13 06       	cpc	r1, r19
 39c:	14 06       	cpc	r1, r20
 39e:	05 06       	cpc	r0, r21
 3a0:	08 95       	ret

000003a2 <__fp_round>:
 3a2:	09 2e       	mov	r0, r25
 3a4:	03 94       	inc	r0
 3a6:	00 0c       	add	r0, r0
 3a8:	11 f4       	brne	.+4      	; 0x3ae <__fp_round+0xc>
 3aa:	88 23       	and	r24, r24
 3ac:	52 f0       	brmi	.+20     	; 0x3c2 <__fp_round+0x20>
 3ae:	bb 0f       	add	r27, r27
 3b0:	40 f4       	brcc	.+16     	; 0x3c2 <__fp_round+0x20>
 3b2:	bf 2b       	or	r27, r31
 3b4:	11 f4       	brne	.+4      	; 0x3ba <__fp_round+0x18>
 3b6:	60 ff       	sbrs	r22, 0
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <__fp_round+0x20>
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	8f 4f       	sbci	r24, 0xFF	; 255
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	08 95       	ret

000003c4 <__fp_split3>:
 3c4:	57 fd       	sbrc	r21, 7
 3c6:	90 58       	subi	r25, 0x80	; 128
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <__fp_splitA+0x10>
 3ce:	5f 3f       	cpi	r21, 0xFF	; 255
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__fp_splitA+0x1a>
 3d2:	47 95       	ror	r20

000003d4 <__fp_splitA>:
 3d4:	88 0f       	add	r24, r24
 3d6:	97 fb       	bst	r25, 7
 3d8:	99 1f       	adc	r25, r25
 3da:	61 f0       	breq	.+24     	; 0x3f4 <__fp_splitA+0x20>
 3dc:	9f 3f       	cpi	r25, 0xFF	; 255
 3de:	79 f0       	breq	.+30     	; 0x3fe <__fp_splitA+0x2a>
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret
 3e4:	12 16       	cp	r1, r18
 3e6:	13 06       	cpc	r1, r19
 3e8:	14 06       	cpc	r1, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	f2 cf       	rjmp	.-28     	; 0x3d2 <__fp_split3+0xe>
 3ee:	46 95       	lsr	r20
 3f0:	f1 df       	rcall	.-30     	; 0x3d4 <__fp_splitA>
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__fp_splitA+0x30>
 3f4:	16 16       	cp	r1, r22
 3f6:	17 06       	cpc	r1, r23
 3f8:	18 06       	cpc	r1, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	f1 cf       	rjmp	.-30     	; 0x3e0 <__fp_splitA+0xc>
 3fe:	86 95       	lsr	r24
 400:	71 05       	cpc	r23, r1
 402:	61 05       	cpc	r22, r1
 404:	08 94       	sec
 406:	08 95       	ret

00000408 <__fp_zero>:
 408:	e8 94       	clt

0000040a <__fp_szero>:
 40a:	bb 27       	eor	r27, r27
 40c:	66 27       	eor	r22, r22
 40e:	77 27       	eor	r23, r23
 410:	cb 01       	movw	r24, r22
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret

00000416 <__mulsf3>:
 416:	0e 94 1e 02 	call	0x43c	; 0x43c <__mulsf3x>
 41a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__fp_round>
 41e:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_pscA>
 422:	38 f0       	brcs	.+14     	; 0x432 <__mulsf3+0x1c>
 424:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_pscB>
 428:	20 f0       	brcs	.+8      	; 0x432 <__mulsf3+0x1c>
 42a:	95 23       	and	r25, r21
 42c:	11 f0       	breq	.+4      	; 0x432 <__mulsf3+0x1c>
 42e:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_inf>
 432:	0c 94 c0 01 	jmp	0x380	; 0x380 <__fp_nan>
 436:	11 24       	eor	r1, r1
 438:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_szero>

0000043c <__mulsf3x>:
 43c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fp_split3>
 440:	70 f3       	brcs	.-36     	; 0x41e <__mulsf3+0x8>

00000442 <__mulsf3_pse>:
 442:	95 9f       	mul	r25, r21
 444:	c1 f3       	breq	.-16     	; 0x436 <__mulsf3+0x20>
 446:	95 0f       	add	r25, r21
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	55 1f       	adc	r21, r21
 44c:	62 9f       	mul	r22, r18
 44e:	f0 01       	movw	r30, r0
 450:	72 9f       	mul	r23, r18
 452:	bb 27       	eor	r27, r27
 454:	f0 0d       	add	r31, r0
 456:	b1 1d       	adc	r27, r1
 458:	63 9f       	mul	r22, r19
 45a:	aa 27       	eor	r26, r26
 45c:	f0 0d       	add	r31, r0
 45e:	b1 1d       	adc	r27, r1
 460:	aa 1f       	adc	r26, r26
 462:	64 9f       	mul	r22, r20
 464:	66 27       	eor	r22, r22
 466:	b0 0d       	add	r27, r0
 468:	a1 1d       	adc	r26, r1
 46a:	66 1f       	adc	r22, r22
 46c:	82 9f       	mul	r24, r18
 46e:	22 27       	eor	r18, r18
 470:	b0 0d       	add	r27, r0
 472:	a1 1d       	adc	r26, r1
 474:	62 1f       	adc	r22, r18
 476:	73 9f       	mul	r23, r19
 478:	b0 0d       	add	r27, r0
 47a:	a1 1d       	adc	r26, r1
 47c:	62 1f       	adc	r22, r18
 47e:	83 9f       	mul	r24, r19
 480:	a0 0d       	add	r26, r0
 482:	61 1d       	adc	r22, r1
 484:	22 1f       	adc	r18, r18
 486:	74 9f       	mul	r23, r20
 488:	33 27       	eor	r19, r19
 48a:	a0 0d       	add	r26, r0
 48c:	61 1d       	adc	r22, r1
 48e:	23 1f       	adc	r18, r19
 490:	84 9f       	mul	r24, r20
 492:	60 0d       	add	r22, r0
 494:	21 1d       	adc	r18, r1
 496:	82 2f       	mov	r24, r18
 498:	76 2f       	mov	r23, r22
 49a:	6a 2f       	mov	r22, r26
 49c:	11 24       	eor	r1, r1
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	50 40       	sbci	r21, 0x00	; 0
 4a2:	9a f0       	brmi	.+38     	; 0x4ca <__mulsf3_pse+0x88>
 4a4:	f1 f0       	breq	.+60     	; 0x4e2 <__mulsf3_pse+0xa0>
 4a6:	88 23       	and	r24, r24
 4a8:	4a f0       	brmi	.+18     	; 0x4bc <__mulsf3_pse+0x7a>
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	bb 1f       	adc	r27, r27
 4b0:	66 1f       	adc	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	50 40       	sbci	r21, 0x00	; 0
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__mulsf3_pse+0x64>
 4bc:	9e 3f       	cpi	r25, 0xFE	; 254
 4be:	51 05       	cpc	r21, r1
 4c0:	80 f0       	brcs	.+32     	; 0x4e2 <__mulsf3_pse+0xa0>
 4c2:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_inf>
 4c6:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_szero>
 4ca:	5f 3f       	cpi	r21, 0xFF	; 255
 4cc:	e4 f3       	brlt	.-8      	; 0x4c6 <__mulsf3_pse+0x84>
 4ce:	98 3e       	cpi	r25, 0xE8	; 232
 4d0:	d4 f3       	brlt	.-12     	; 0x4c6 <__mulsf3_pse+0x84>
 4d2:	86 95       	lsr	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	f7 95       	ror	r31
 4dc:	e7 95       	ror	r30
 4de:	9f 5f       	subi	r25, 0xFF	; 255
 4e0:	c1 f7       	brne	.-16     	; 0x4d2 <__mulsf3_pse+0x90>
 4e2:	fe 2b       	or	r31, r30
 4e4:	88 0f       	add	r24, r24
 4e6:	91 1d       	adc	r25, r1
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	97 f9       	bld	r25, 7
 4ee:	08 95       	ret

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
