
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00000e8a  00000f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  008001fc  008001fc  0000101a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001118  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000045f  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00002d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aac  00000000  00000000  000033f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003ea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ef       	ldi	r26, 0xFC	; 252
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 43 07 	jmp	0xe86	; 0xe86 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USARTstart>:
	return 0;
}

void USARTstart(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);// set baud rate to 115200
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0); // Enable Transmit and Receive
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00); // Set Frame: 8bit, 1 Stop
  b8:	e2 ec       	ldi	r30, 0xC2	; 194
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <USART_tx_string>:
	
	return;
}

void USART_tx_string(char *data)// transmit value function
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	while ((*data != '\0'))// loop to send each character over the serial connection
  c8:	fc 01       	movw	r30, r24
  ca:	20 81       	ld	r18, Z
  cc:	22 23       	and	r18, r18
  ce:	69 f0       	breq	.+26     	; 0xea <USART_tx_string+0x26>
  d0:	dc 01       	movw	r26, r24
  d2:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1<<UDRE0)))// wait until transmit buffer is clear
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
		{
		}
		UDR0 = *data; // load character into transmit buffer
  d8:	c6 ec       	ldi	r28, 0xC6	; 198
  da:	d0 e0       	ldi	r29, 0x00	; 0

void USART_tx_string(char *data)// transmit value function
{
	while ((*data != '\0'))// loop to send each character over the serial connection
	{
		while (!(UCSR0A & (1<<UDRE0)))// wait until transmit buffer is clear
  dc:	90 81       	ld	r25, Z
  de:	95 ff       	sbrs	r25, 5
  e0:	fd cf       	rjmp	.-6      	; 0xdc <USART_tx_string+0x18>
		{
		}
		UDR0 = *data; // load character into transmit buffer
  e2:	28 83       	st	Y, r18
	return;
}

void USART_tx_string(char *data)// transmit value function
{
	while ((*data != '\0'))// loop to send each character over the serial connection
  e4:	2d 91       	ld	r18, X+
  e6:	21 11       	cpse	r18, r1
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <USART_tx_string+0x18>
		{
		}
		UDR0 = *data; // load character into transmit buffer
		data++; // go to next character
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
// Connect to Adafruit: AT+CIPSTART= "TCP","%s(IP)" , 80 *Add \ in front of " for it to be read properly 
// Send data: AT+CIPSEND=(string.length())
// Data string to send: "GET /update?api_key=%s&field1=(sensor value)\r\n\r\n",APIKEY,Sensor)

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x8>
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0xa>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	sei (); // enable global interrupts
  fe:	78 94       	sei
	USARTstart(UBRR_115200); // initialize the USART port
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <USARTstart>
	i2c_init();// initialize I2C	
 108:	0e 94 a7 01 	call	0x34e	; 0x34e <i2c_init>
	
	DDRB |= (1<<5);
 10c:	25 9a       	sbi	0x04, 5	; 4

	uint8_t ret;
	int16_t accel_buff[3];
	double accelX, accelY, accelZ;
	//Build command connect to Wifi and transmit
	strcat(WIFI_COMMAND,SSID);
 10e:	60 e6       	ldi	r22, 0x60	; 96
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	84 e1       	ldi	r24, 0x14	; 20
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcat>
	strcat(WIFI_COMMAND,PASSWORD);
 11a:	68 e5       	ldi	r22, 0x58	; 88
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	84 e1       	ldi	r24, 0x14	; 20
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcat>
	USART_tx_string(WIFI_COMMAND);// Connect to IO.Adafruit	
 126:	84 e1       	ldi	r24, 0x14	; 20
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	//initialize & test MPU5060 availability
	ret = i2c_start(MPU6050_ADDRESS+I2C_WRITE);
 12e:	82 ed       	ldi	r24, 0xD2	; 210
 130:	0e 94 ad 01 	call	0x35a	; 0x35a <i2c_start>
	USART_tx_string("HELLO2\r\n");
 134:	88 e6       	ldi	r24, 0x68	; 104
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
 	if(~ret)
 		{
 			PORTB |= (1<<5);
 13c:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	81 ee       	ldi	r24, 0xE1	; 225
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x54>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x5e>
 14e:	00 00       	nop
 			_delay_ms(200);
 			PORTB &= ~(1<<5);
 150:	2d 98       	cbi	0x05, 5	; 5
 		}

	mpu6050_init();// Initialize MPU
 152:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mpu6050_init>
	USART_tx_string("HELLO3\r\n");
 156:	81 e7       	ldi	r24, 0x71	; 113
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	// Build Command to connect to Cloud
	strcat(CONNECT_COMMAND,ADAFRUITIP);
 15e:	66 e4       	ldi	r22, 0x46	; 70
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcat>
	strcat(CONNECT_COMMAND,PORTNUM);
 16a:	6f e3       	ldi	r22, 0x3F	; 63
 16c:	71 e0       	ldi	r23, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcat>

	USART_tx_string(CONNECT_COMMAND);// Connect to IO.Adafruit
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	USART_tx_string("HELLO5\r\n");
 17e:	8a e7       	ldi	r24, 0x7A	; 122
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
		// acceleration (m/s^2)
		accelX = accel_buff[0]*9.8*2/32768;
		accelY = accel_buff[1]*9.8*2/32768;
		accelZ = accel_buff[2]*9.8*2/32768;
		
		snprintf(Xout, sizeof(Xout),"%3f", accelX); // convert value to a string
 186:	0c e8       	ldi	r16, 0x8C	; 140
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	0f 2e       	mov	r0, r31
 18c:	fa e0       	ldi	r31, 0x0A	; 10
 18e:	ff 2e       	mov	r15, r31
 190:	f0 2d       	mov	r31, r0
		snprintf(Yout, sizeof(Yout),"%3f", accelY); // convert value to a string
		snprintf(Zout, sizeof(Zout),"%3f", accelZ); // convert value to a string
		// Build Data string to send to cloud
		snprintf(DATA_STR, sizeof(DATA_STR),"GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f\r\n",APIKEY,accelX,accelY,accelZ);
 192:	0f 2e       	mov	r0, r31
 194:	f6 e4       	ldi	r31, 0x46	; 70
 196:	2f 2e       	mov	r2, r31
 198:	f0 2d       	mov	r31, r0

	USART_tx_string(CONNECT_COMMAND);// Connect to IO.Adafruit
	USART_tx_string("HELLO5\r\n");
	while (1) // infinite loop to transmit the sensor value over serial port
	{
			USART_tx_string("HELLO6\r\n");
 19a:	83 e8       	ldi	r24, 0x83	; 131
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
		mpu6050_read_accel_ALL(accel_buff);
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 b5 02 	call	0x56a	; 0x56a <mpu6050_read_accel_ALL>
			
		// acceleration (m/s^2)
		accelX = accel_buff[0]*9.8*2/32768;
 1aa:	69 81       	ldd	r22, Y+1	; 0x01
 1ac:	7a 81       	ldd	r23, Y+2	; 0x02
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__floatsisf>
 1ba:	2d ec       	ldi	r18, 0xCD	; 205
 1bc:	3c ec       	ldi	r19, 0xCC	; 204
 1be:	4c e1       	ldi	r20, 0x1C	; 28
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	58 e3       	ldi	r21, 0x38	; 56
 1d6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 1da:	e6 2e       	mov	r14, r22
 1dc:	d7 2e       	mov	r13, r23
 1de:	c8 2e       	mov	r12, r24
 1e0:	b9 2e       	mov	r11, r25
		accelY = accel_buff[1]*9.8*2/32768;
 1e2:	6b 81       	ldd	r22, Y+3	; 0x03
 1e4:	7c 81       	ldd	r23, Y+4	; 0x04
 1e6:	07 2e       	mov	r0, r23
 1e8:	00 0c       	add	r0, r0
 1ea:	88 0b       	sbc	r24, r24
 1ec:	99 0b       	sbc	r25, r25
 1ee:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__floatsisf>
 1f2:	2d ec       	ldi	r18, 0xCD	; 205
 1f4:	3c ec       	ldi	r19, 0xCC	; 204
 1f6:	4c e1       	ldi	r20, 0x1C	; 28
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 1fe:	9b 01       	movw	r18, r22
 200:	ac 01       	movw	r20, r24
 202:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	58 e3       	ldi	r21, 0x38	; 56
 20e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 212:	a6 2e       	mov	r10, r22
 214:	97 2e       	mov	r9, r23
 216:	88 2e       	mov	r8, r24
 218:	79 2e       	mov	r7, r25
		accelZ = accel_buff[2]*9.8*2/32768;
 21a:	6d 81       	ldd	r22, Y+5	; 0x05
 21c:	7e 81       	ldd	r23, Y+6	; 0x06
 21e:	07 2e       	mov	r0, r23
 220:	00 0c       	add	r0, r0
 222:	88 0b       	sbc	r24, r24
 224:	99 0b       	sbc	r25, r25
 226:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__floatsisf>
 22a:	2d ec       	ldi	r18, 0xCD	; 205
 22c:	3c ec       	ldi	r19, 0xCC	; 204
 22e:	4c e1       	ldi	r20, 0x1C	; 28
 230:	51 e4       	ldi	r21, 0x41	; 65
 232:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	58 e3       	ldi	r21, 0x38	; 56
 246:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3>
 24a:	66 2e       	mov	r6, r22
 24c:	57 2e       	mov	r5, r23
 24e:	48 2e       	mov	r4, r24
 250:	39 2e       	mov	r3, r25
		
		snprintf(Xout, sizeof(Xout),"%3f", accelX); // convert value to a string
 252:	bf 92       	push	r11
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	1f 93       	push	r17
 25c:	0f 93       	push	r16
 25e:	1f 92       	push	r1
 260:	ff 92       	push	r15
 262:	a2 e4       	ldi	r26, 0x42	; 66
 264:	b2 e0       	ldi	r27, 0x02	; 2
 266:	bf 93       	push	r27
 268:	af 93       	push	r26
 26a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
		snprintf(Yout, sizeof(Yout),"%3f", accelY); // convert value to a string
 26e:	7f 92       	push	r7
 270:	8f 92       	push	r8
 272:	9f 92       	push	r9
 274:	af 92       	push	r10
 276:	1f 93       	push	r17
 278:	0f 93       	push	r16
 27a:	1f 92       	push	r1
 27c:	ff 92       	push	r15
 27e:	aa e6       	ldi	r26, 0x6A	; 106
 280:	b2 e0       	ldi	r27, 0x02	; 2
 282:	bf 93       	push	r27
 284:	af 93       	push	r26
 286:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
		snprintf(Zout, sizeof(Zout),"%3f", accelZ); // convert value to a string
 28a:	3f 92       	push	r3
 28c:	4f 92       	push	r4
 28e:	5f 92       	push	r5
 290:	6f 92       	push	r6
 292:	1f 93       	push	r17
 294:	0f 93       	push	r16
 296:	1f 92       	push	r1
 298:	ff 92       	push	r15
 29a:	ac e4       	ldi	r26, 0x4C	; 76
 29c:	b2 e0       	ldi	r27, 0x02	; 2
 29e:	bf 93       	push	r27
 2a0:	af 93       	push	r26
 2a2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
		// Build Data string to send to cloud
		snprintf(DATA_STR, sizeof(DATA_STR),"GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f\r\n",APIKEY,accelX,accelY,accelZ);
 2a6:	3f 92       	push	r3
 2a8:	4f 92       	push	r4
 2aa:	5f 92       	push	r5
 2ac:	6f 92       	push	r6
 2ae:	7f 92       	push	r7
 2b0:	8f 92       	push	r8
 2b2:	9f 92       	push	r9
 2b4:	af 92       	push	r10
 2b6:	bf 92       	push	r11
 2b8:	cf 92       	push	r12
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ae e1       	ldi	r26, 0x1E	; 30
 2c0:	b1 e0       	ldi	r27, 0x01	; 1
 2c2:	bf 93       	push	r27
 2c4:	af 93       	push	r26
 2c6:	a0 e9       	ldi	r26, 0x90	; 144
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	bf 93       	push	r27
 2cc:	af 93       	push	r26
 2ce:	1f 92       	push	r1
 2d0:	2f 92       	push	r2
 2d2:	ac ef       	ldi	r26, 0xFC	; 252
 2d4:	b1 e0       	ldi	r27, 0x01	; 1
 2d6:	bf 93       	push	r27
 2d8:	af 93       	push	r26
 2da:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
//  		strcat(&DATA_STR,"&field3=");
//  		strcat(&DATA_STR,Zout);
//  		strcat(&DATA_STR,"\r\n");// add line feed
		
		// Build Command to Send
		snprintf(SEND_COMMAND, sizeof(SEND_COMMAND),"AT+CIPSEND=%d\r\n",sizeof(DATA_STR));
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	1f 92       	push	r1
 2ea:	2f 92       	push	r2
 2ec:	ad ec       	ldi	r26, 0xCD	; 205
 2ee:	b1 e0       	ldi	r27, 0x01	; 1
 2f0:	bf 93       	push	r27
 2f2:	af 93       	push	r26
 2f4:	1f 92       	push	r1
 2f6:	84 e1       	ldi	r24, 0x14	; 20
 2f8:	8f 93       	push	r24
 2fa:	a6 e5       	ldi	r26, 0x56	; 86
 2fc:	b2 e0       	ldi	r27, 0x02	; 2
 2fe:	bf 93       	push	r27
 300:	af 93       	push	r26
 302:	0e 94 5e 04 	call	0x8bc	; 0x8bc <snprintf>
//  		strcat(&SEND_COMMAND,sizeof(DATA_STR));// Length of string to be sent
//  		strcat(&SEND_COMMAND,"\r\n");// add line feed
		USART_tx_string(CONNECT_COMMAND);// Connect to IO.Adafruit
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
 30e:	8f e1       	ldi	r24, 0x1F	; 31
 310:	9e e4       	ldi	r25, 0x4E	; 78
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x222>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x228>
 318:	00 00       	nop
		_delay_ms(10);
		USART_tx_string(SEND_COMMAND);// Transmit command to send data
 31a:	86 e5       	ldi	r24, 0x56	; 86
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
 322:	af e1       	ldi	r26, 0x1F	; 31
 324:	be e4       	ldi	r27, 0x4E	; 78
 326:	11 97       	sbiw	r26, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x236>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x23c>
 32c:	00 00       	nop
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
		_delay_ms(10);
		USART_tx_string(DATA_STR); // transmit data over serial connection
 338:	8c ef       	ldi	r24, 0xFC	; 252
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
 340:	af e1       	ldi	r26, 0x1F	; 31
 342:	be e4       	ldi	r27, 0x4E	; 78
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0x254>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x25a>
 34a:	00 00       	nop
 34c:	26 cf       	rjmp	.-436    	; 0x19a <main+0xaa>

0000034e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 34e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 352:	88 e4       	ldi	r24, 0x48	; 72
 354:	80 93 b8 00 	sts	0x00B8, r24
 358:	08 95       	ret

0000035a <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 35e:	94 ea       	ldi	r25, 0xA4	; 164
 360:	90 93 bc 00 	sts	0x00BC, r25
	USART_tx_string("HELLO36\r\n");
 364:	8d ed       	ldi	r24, 0xDD	; 221
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 36c:	ec eb       	ldi	r30, 0xBC	; 188
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	90 81       	ld	r25, Z
 372:	99 23       	and	r25, r25
 374:	ec f7       	brge	.-6      	; 0x370 <i2c_start+0x16>
	USART_tx_string("HELLO38\r\n");
 376:	87 ee       	ldi	r24, 0xE7	; 231
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 37e:	90 91 b9 00 	lds	r25, 0x00B9
 382:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 384:	98 30       	cpi	r25, 0x08	; 8
 386:	11 f0       	breq	.+4      	; 0x38c <i2c_start+0x32>
 388:	90 31       	cpi	r25, 0x10	; 16
 38a:	c1 f4       	brne	.+48     	; 0x3bc <i2c_start+0x62>

	// send device address
	TWDR = address;
 38c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 390:	84 e8       	ldi	r24, 0x84	; 132
 392:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 396:	ec eb       	ldi	r30, 0xBC	; 188
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	ec f7       	brge	.-6      	; 0x39a <i2c_start+0x40>
	USART_tx_string("HELLO365\r\n");
 3a0:	81 ef       	ldi	r24, 0xF1	; 241
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_tx_string>
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 3a8:	90 91 b9 00 	lds	r25, 0x00B9
 3ac:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 3ae:	98 31       	cpi	r25, 0x18	; 24
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <i2c_start+0x66>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 34       	cpi	r25, 0x40	; 64
 3b6:	29 f4       	brne	.+10     	; 0x3c2 <i2c_start+0x68>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <i2c_start+0x68>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
	USART_tx_string("HELLO38\r\n");
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <i2c_start+0x68>
	USART_tx_string("HELLO365\r\n");
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 3c0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 3ca:	ec eb       	ldi	r30, 0xBC	; 188
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3d0:	a9 eb       	ldi	r26, 0xB9	; 185
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 3d4:	cb eb       	ldi	r28, 0xBB	; 187
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 3d8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3da:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 3dc:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 3de:	90 81       	ld	r25, Z
 3e0:	99 23       	and	r25, r25
 3e2:	ec f7       	brge	.-6      	; 0x3de <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3e4:	9c 91       	ld	r25, X
 3e6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 3e8:	98 30       	cpi	r25, 0x08	; 8
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <i2c_start_wait+0x2a>
 3ec:	90 31       	cpi	r25, 0x10	; 16
 3ee:	b1 f7       	brne	.-20     	; 0x3dc <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 3f0:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 3f2:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 3f4:	90 81       	ld	r25, Z
 3f6:	99 23       	and	r25, r25
 3f8:	ec f7       	brge	.-6      	; 0x3f4 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3fa:	9c 91       	ld	r25, X
 3fc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 3fe:	90 32       	cpi	r25, 0x20	; 32
 400:	11 f0       	breq	.+4      	; 0x406 <i2c_start_wait+0x40>
 402:	98 35       	cpi	r25, 0x58	; 88
 404:	29 f4       	brne	.+10     	; 0x410 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 406:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 408:	90 81       	ld	r25, Z
 40a:	94 fd       	sbrc	r25, 4
 40c:	fd cf       	rjmp	.-6      	; 0x408 <i2c_start_wait+0x42>
 40e:	e6 cf       	rjmp	.-52     	; 0x3dc <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 416:	0e 94 ad 01 	call	0x35a	; 0x35a <i2c_start>

}/* i2c_rep_start */
 41a:	08 95       	ret

0000041c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 41c:	84 e9       	ldi	r24, 0x94	; 148
 41e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 422:	ec eb       	ldi	r30, 0xBC	; 188
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	84 fd       	sbrc	r24, 4
 42a:	fd cf       	rjmp	.-6      	; 0x426 <i2c_stop+0xa>

}/* i2c_stop */
 42c:	08 95       	ret

0000042e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 42e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 432:	84 e8       	ldi	r24, 0x84	; 132
 434:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 438:	ec eb       	ldi	r30, 0xBC	; 188
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	88 23       	and	r24, r24
 440:	ec f7       	brge	.-6      	; 0x43c <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 442:	90 91 b9 00 	lds	r25, 0x00B9
 446:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	98 32       	cpi	r25, 0x28	; 40
 44c:	09 f4       	brne	.+2      	; 0x450 <i2c_write+0x22>
 44e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 450:	08 95       	ret

00000452 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 452:	84 e8       	ldi	r24, 0x84	; 132
 454:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 458:	ec eb       	ldi	r30, 0xBC	; 188
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	88 23       	and	r24, r24
 460:	ec f7       	brge	.-6      	; 0x45c <i2c_readNak+0xa>
	
    return TWDR;
 462:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 466:	08 95       	ret

00000468 <i2c_read_byte>:




// read one byte from dev, stored in value, return 1 for error
void i2c_read_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data){
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	c8 2f       	mov	r28, r24
 472:	d6 2f       	mov	r29, r22
 474:	8a 01       	movw	r16, r20

	i2c_start_wait(dev_addr+I2C_WRITE); 	//start i2c to write register address
 476:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_start_wait>
	i2c_write(reg_addr);			//write address of register to read
 47a:	8d 2f       	mov	r24, r29
 47c:	0e 94 17 02 	call	0x42e	; 0x42e <i2c_write>
	i2c_rep_start(dev_addr+I2C_READ);	//restart i2c to start reading
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	8c 0f       	add	r24, r28
 484:	0e 94 0b 02 	call	0x416	; 0x416 <i2c_rep_start>
	*data = i2c_readNak();
 488:	0e 94 29 02 	call	0x452	; 0x452 <i2c_readNak>
 48c:	f8 01       	movw	r30, r16
 48e:	80 83       	st	Z, r24
        i2c_stop();
 490:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>

}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <i2c_write_byte>:



// write one byte to dev
void i2c_write_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data){
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	d6 2f       	mov	r29, r22
 4a4:	c4 2f       	mov	r28, r20
	
	i2c_start_wait(dev_addr+I2C_WRITE);
 4a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_start_wait>
 	i2c_write(reg_addr);                     
 4aa:	8d 2f       	mov	r24, r29
 4ac:	0e 94 17 02 	call	0x42e	; 0x42e <i2c_write>
        i2c_write(data);
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 17 02 	call	0x42e	; 0x42e <i2c_write>
	i2c_stop();
 4b6:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>

}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <mpu6050_init>:

//configure important settings in mpu6050
//subject to change app(ilcation) by app
void mpu6050_init(void){
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 0x00); //exit sleep mode
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	6b e6       	ldi	r22, 0x6B	; 107
 4c4:	82 ed       	ldi	r24, 0xD2	; 210
 4c6:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_CONFIG, 0x01); // LPF, bandwidth = 184(accel) and 188(gyro)
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	6a e1       	ldi	r22, 0x1A	; 26
 4ce:	82 ed       	ldi	r24, 0xD2	; 210
 4d0:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1<<4); // gyro ADC scale: 1000 deg/s
 4d4:	40 e1       	ldi	r20, 0x10	; 16
 4d6:	6b e1       	ldi	r22, 0x1B	; 27
 4d8:	82 ed       	ldi	r24, 0xD2	; 210
 4da:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 0x00); //accel ADC scale: 2 g
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	6c e1       	ldi	r22, 0x1C	; 28
 4e2:	82 ed       	ldi	r24, 0xD2	; 210
 4e4:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 0x00); //enable data ready interrupt
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	68 e3       	ldi	r22, 0x38	; 56
 4ec:	82 ed       	ldi	r24, 0xD2	; 210
 4ee:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 0x00); //don't reset signal path
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	68 e6       	ldi	r22, 0x68	; 104
 4f6:	82 ed       	ldi	r24, 0xD2	; 210
 4f8:	0e 94 4f 02 	call	0x49e	; 0x49e <i2c_write_byte>
 4fc:	08 95       	ret

000004fe <mpu6050_read_accel_X>:


//read accel X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_X(uint8_t * buff){
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, buff);
 504:	ac 01       	movw	r20, r24
 506:	6b e3       	ldi	r22, 0x3B	; 59
 508:	82 ed       	ldi	r24, 0xD2	; 210
 50a:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, buff+1);
 50e:	ae 01       	movw	r20, r28
 510:	4f 5f       	subi	r20, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	6c e3       	ldi	r22, 0x3C	; 60
 516:	82 ed       	ldi	r24, 0xD2	; 210
 518:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <mpu6050_read_accel_Y>:

//read accel Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Y(uint8_t * buff){
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, buff);
 528:	ac 01       	movw	r20, r24
 52a:	6d e3       	ldi	r22, 0x3D	; 61
 52c:	82 ed       	ldi	r24, 0xD2	; 210
 52e:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, buff+1);
 532:	ae 01       	movw	r20, r28
 534:	4f 5f       	subi	r20, 0xFF	; 255
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	6e e3       	ldi	r22, 0x3E	; 62
 53a:	82 ed       	ldi	r24, 0xD2	; 210
 53c:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <mpu6050_read_accel_Z>:

//read accel Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Z(uint8_t * buff){
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, buff);
 54c:	ac 01       	movw	r20, r24
 54e:	6f e3       	ldi	r22, 0x3F	; 63
 550:	82 ed       	ldi	r24, 0xD2	; 210
 552:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, buff+1);
 556:	ae 01       	movw	r20, r28
 558:	4f 5f       	subi	r20, 0xFF	; 255
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	60 e4       	ldi	r22, 0x40	; 64
 55e:	82 ed       	ldi	r24, 0xD2	; 210
 560:	0e 94 34 02 	call	0x468	; 0x468 <i2c_read_byte>
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <mpu6050_read_accel_ALL>:

// read accel X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_accel_ALL(int16_t * buff){
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	00 d0       	rcall	.+0      	; 0x574 <mpu6050_read_accel_ALL+0xa>
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_accel_X(tmp);
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <mpu6050_read_accel_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	98 2f       	mov	r25, r24
 588:	88 27       	eor	r24, r24
 58a:	2a 81       	ldd	r18, Y+2	; 0x02
 58c:	82 2b       	or	r24, r18
 58e:	f8 01       	movw	r30, r16
 590:	91 83       	std	Z+1, r25	; 0x01
 592:	80 83       	st	Z, r24
	mpu6050_read_accel_Y(tmp);
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	0e 94 91 02 	call	0x522	; 0x522 <mpu6050_read_accel_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	98 2f       	mov	r25, r24
 5a2:	88 27       	eor	r24, r24
 5a4:	2a 81       	ldd	r18, Y+2	; 0x02
 5a6:	82 2b       	or	r24, r18
 5a8:	f8 01       	movw	r30, r16
 5aa:	93 83       	std	Z+3, r25	; 0x03
 5ac:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_accel_Z(tmp);
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	0e 94 a3 02 	call	0x546	; 0x546 <mpu6050_read_accel_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
 5b6:	29 81       	ldd	r18, Y+1	; 0x01
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	32 2f       	mov	r19, r18
 5bc:	22 27       	eor	r18, r18
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	28 2b       	or	r18, r24
 5c2:	f8 01       	movw	r30, r16
 5c4:	35 83       	std	Z+5, r19	; 0x05
 5c6:	24 83       	std	Z+4, r18	; 0x04
}
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	08 95       	ret

000005d6 <__subsf3>:
 5d6:	50 58       	subi	r21, 0x80	; 128

000005d8 <__addsf3>:
 5d8:	bb 27       	eor	r27, r27
 5da:	aa 27       	eor	r26, r26
 5dc:	0e 94 03 03 	call	0x606	; 0x606 <__addsf3x>
 5e0:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_round>
 5e4:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_pscA>
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__addsf3+0x20>
 5ea:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscB>
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__addsf3+0x20>
 5f0:	39 f4       	brne	.+14     	; 0x600 <__addsf3+0x28>
 5f2:	9f 3f       	cpi	r25, 0xFF	; 255
 5f4:	19 f4       	brne	.+6      	; 0x5fc <__addsf3+0x24>
 5f6:	26 f4       	brtc	.+8      	; 0x600 <__addsf3+0x28>
 5f8:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_nan>
 5fc:	0e f4       	brtc	.+2      	; 0x600 <__addsf3+0x28>
 5fe:	e0 95       	com	r30
 600:	e7 fb       	bst	r30, 7
 602:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_inf>

00000606 <__addsf3x>:
 606:	e9 2f       	mov	r30, r25
 608:	0e 94 bd 03 	call	0x77a	; 0x77a <__fp_split3>
 60c:	58 f3       	brcs	.-42     	; 0x5e4 <__addsf3+0xc>
 60e:	ba 17       	cp	r27, r26
 610:	62 07       	cpc	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	95 07       	cpc	r25, r21
 618:	20 f0       	brcs	.+8      	; 0x622 <__addsf3x+0x1c>
 61a:	79 f4       	brne	.+30     	; 0x63a <__addsf3x+0x34>
 61c:	a6 f5       	brtc	.+104    	; 0x686 <__addsf3x+0x80>
 61e:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_zero>
 622:	0e f4       	brtc	.+2      	; 0x626 <__addsf3x+0x20>
 624:	e0 95       	com	r30
 626:	0b 2e       	mov	r0, r27
 628:	ba 2f       	mov	r27, r26
 62a:	a0 2d       	mov	r26, r0
 62c:	0b 01       	movw	r0, r22
 62e:	b9 01       	movw	r22, r18
 630:	90 01       	movw	r18, r0
 632:	0c 01       	movw	r0, r24
 634:	ca 01       	movw	r24, r20
 636:	a0 01       	movw	r20, r0
 638:	11 24       	eor	r1, r1
 63a:	ff 27       	eor	r31, r31
 63c:	59 1b       	sub	r21, r25
 63e:	99 f0       	breq	.+38     	; 0x666 <__addsf3x+0x60>
 640:	59 3f       	cpi	r21, 0xF9	; 249
 642:	50 f4       	brcc	.+20     	; 0x658 <__addsf3x+0x52>
 644:	50 3e       	cpi	r21, 0xE0	; 224
 646:	68 f1       	brcs	.+90     	; 0x6a2 <__addsf3x+0x9c>
 648:	1a 16       	cp	r1, r26
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	a2 2f       	mov	r26, r18
 64e:	23 2f       	mov	r18, r19
 650:	34 2f       	mov	r19, r20
 652:	44 27       	eor	r20, r20
 654:	58 5f       	subi	r21, 0xF8	; 248
 656:	f3 cf       	rjmp	.-26     	; 0x63e <__addsf3x+0x38>
 658:	46 95       	lsr	r20
 65a:	37 95       	ror	r19
 65c:	27 95       	ror	r18
 65e:	a7 95       	ror	r26
 660:	f0 40       	sbci	r31, 0x00	; 0
 662:	53 95       	inc	r21
 664:	c9 f7       	brne	.-14     	; 0x658 <__addsf3x+0x52>
 666:	7e f4       	brtc	.+30     	; 0x686 <__addsf3x+0x80>
 668:	1f 16       	cp	r1, r31
 66a:	ba 0b       	sbc	r27, r26
 66c:	62 0b       	sbc	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba f0       	brmi	.+46     	; 0x6a2 <__addsf3x+0x9c>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	a1 f0       	breq	.+40     	; 0x6a0 <__addsf3x+0x9a>
 678:	ff 0f       	add	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	c2 f7       	brpl	.-16     	; 0x674 <__addsf3x+0x6e>
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <__addsf3x+0x9c>
 686:	ba 0f       	add	r27, r26
 688:	62 1f       	adc	r22, r18
 68a:	73 1f       	adc	r23, r19
 68c:	84 1f       	adc	r24, r20
 68e:	48 f4       	brcc	.+18     	; 0x6a2 <__addsf3x+0x9c>
 690:	87 95       	ror	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__addsf3x+0x9a>
 69e:	b0 cf       	rjmp	.-160    	; 0x600 <__addsf3+0x28>
 6a0:	93 95       	inc	r25
 6a2:	88 0f       	add	r24, r24
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0xa2>
 6a6:	99 27       	eor	r25, r25
 6a8:	ee 0f       	add	r30, r30
 6aa:	97 95       	ror	r25
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret

000006b0 <__floatunsisf>:
 6b0:	e8 94       	clt
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <__floatsisf+0x12>

000006b4 <__floatsisf>:
 6b4:	97 fb       	bst	r25, 7
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__floatsisf+0x12>
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	99 23       	and	r25, r25
 6c8:	a9 f0       	breq	.+42     	; 0x6f4 <__floatsisf+0x40>
 6ca:	f9 2f       	mov	r31, r25
 6cc:	96 e9       	ldi	r25, 0x96	; 150
 6ce:	bb 27       	eor	r27, r27
 6d0:	93 95       	inc	r25
 6d2:	f6 95       	lsr	r31
 6d4:	87 95       	ror	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b7 95       	ror	r27
 6dc:	f1 11       	cpse	r31, r1
 6de:	f8 cf       	rjmp	.-16     	; 0x6d0 <__floatsisf+0x1c>
 6e0:	fa f4       	brpl	.+62     	; 0x720 <__floatsisf+0x6c>
 6e2:	bb 0f       	add	r27, r27
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__floatsisf+0x36>
 6e6:	60 ff       	sbrs	r22, 0
 6e8:	1b c0       	rjmp	.+54     	; 0x720 <__floatsisf+0x6c>
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <__floatsisf+0x6c>
 6f4:	88 23       	and	r24, r24
 6f6:	11 f0       	breq	.+4      	; 0x6fc <__floatsisf+0x48>
 6f8:	96 e9       	ldi	r25, 0x96	; 150
 6fa:	11 c0       	rjmp	.+34     	; 0x71e <__floatsisf+0x6a>
 6fc:	77 23       	and	r23, r23
 6fe:	21 f0       	breq	.+8      	; 0x708 <__floatsisf+0x54>
 700:	9e e8       	ldi	r25, 0x8E	; 142
 702:	87 2f       	mov	r24, r23
 704:	76 2f       	mov	r23, r22
 706:	05 c0       	rjmp	.+10     	; 0x712 <__floatsisf+0x5e>
 708:	66 23       	and	r22, r22
 70a:	71 f0       	breq	.+28     	; 0x728 <__floatsisf+0x74>
 70c:	96 e8       	ldi	r25, 0x86	; 134
 70e:	86 2f       	mov	r24, r22
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	2a f0       	brmi	.+10     	; 0x720 <__floatsisf+0x6c>
 716:	9a 95       	dec	r25
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	da f7       	brpl	.-10     	; 0x716 <__floatsisf+0x62>
 720:	88 0f       	add	r24, r24
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret

0000072a <__fp_inf>:
 72a:	97 f9       	bld	r25, 7
 72c:	9f 67       	ori	r25, 0x7F	; 127
 72e:	80 e8       	ldi	r24, 0x80	; 128
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	08 95       	ret

00000736 <__fp_nan>:
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	80 ec       	ldi	r24, 0xC0	; 192
 73a:	08 95       	ret

0000073c <__fp_pscA>:
 73c:	00 24       	eor	r0, r0
 73e:	0a 94       	dec	r0
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	18 06       	cpc	r1, r24
 746:	09 06       	cpc	r0, r25
 748:	08 95       	ret

0000074a <__fp_pscB>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	12 16       	cp	r1, r18
 750:	13 06       	cpc	r1, r19
 752:	14 06       	cpc	r1, r20
 754:	05 06       	cpc	r0, r21
 756:	08 95       	ret

00000758 <__fp_round>:
 758:	09 2e       	mov	r0, r25
 75a:	03 94       	inc	r0
 75c:	00 0c       	add	r0, r0
 75e:	11 f4       	brne	.+4      	; 0x764 <__fp_round+0xc>
 760:	88 23       	and	r24, r24
 762:	52 f0       	brmi	.+20     	; 0x778 <__fp_round+0x20>
 764:	bb 0f       	add	r27, r27
 766:	40 f4       	brcc	.+16     	; 0x778 <__fp_round+0x20>
 768:	bf 2b       	or	r27, r31
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0x18>
 76c:	60 ff       	sbrs	r22, 0
 76e:	04 c0       	rjmp	.+8      	; 0x778 <__fp_round+0x20>
 770:	6f 5f       	subi	r22, 0xFF	; 255
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__fp_split3>:
 77a:	57 fd       	sbrc	r21, 7
 77c:	90 58       	subi	r25, 0x80	; 128
 77e:	44 0f       	add	r20, r20
 780:	55 1f       	adc	r21, r21
 782:	59 f0       	breq	.+22     	; 0x79a <__fp_splitA+0x10>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	71 f0       	breq	.+28     	; 0x7a4 <__fp_splitA+0x1a>
 788:	47 95       	ror	r20

0000078a <__fp_splitA>:
 78a:	88 0f       	add	r24, r24
 78c:	97 fb       	bst	r25, 7
 78e:	99 1f       	adc	r25, r25
 790:	61 f0       	breq	.+24     	; 0x7aa <__fp_splitA+0x20>
 792:	9f 3f       	cpi	r25, 0xFF	; 255
 794:	79 f0       	breq	.+30     	; 0x7b4 <__fp_splitA+0x2a>
 796:	87 95       	ror	r24
 798:	08 95       	ret
 79a:	12 16       	cp	r1, r18
 79c:	13 06       	cpc	r1, r19
 79e:	14 06       	cpc	r1, r20
 7a0:	55 1f       	adc	r21, r21
 7a2:	f2 cf       	rjmp	.-28     	; 0x788 <__fp_split3+0xe>
 7a4:	46 95       	lsr	r20
 7a6:	f1 df       	rcall	.-30     	; 0x78a <__fp_splitA>
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <__fp_splitA+0x30>
 7aa:	16 16       	cp	r1, r22
 7ac:	17 06       	cpc	r1, r23
 7ae:	18 06       	cpc	r1, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	f1 cf       	rjmp	.-30     	; 0x796 <__fp_splitA+0xc>
 7b4:	86 95       	lsr	r24
 7b6:	71 05       	cpc	r23, r1
 7b8:	61 05       	cpc	r22, r1
 7ba:	08 94       	sec
 7bc:	08 95       	ret

000007be <__fp_zero>:
 7be:	e8 94       	clt

000007c0 <__fp_szero>:
 7c0:	bb 27       	eor	r27, r27
 7c2:	66 27       	eor	r22, r22
 7c4:	77 27       	eor	r23, r23
 7c6:	cb 01       	movw	r24, r22
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__mulsf3>:
 7cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3x>
 7d0:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_round>
 7d4:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_pscA>
 7d8:	38 f0       	brcs	.+14     	; 0x7e8 <__mulsf3+0x1c>
 7da:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscB>
 7de:	20 f0       	brcs	.+8      	; 0x7e8 <__mulsf3+0x1c>
 7e0:	95 23       	and	r25, r21
 7e2:	11 f0       	breq	.+4      	; 0x7e8 <__mulsf3+0x1c>
 7e4:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_inf>
 7e8:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_nan>
 7ec:	11 24       	eor	r1, r1
 7ee:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_szero>

000007f2 <__mulsf3x>:
 7f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__fp_split3>
 7f6:	70 f3       	brcs	.-36     	; 0x7d4 <__mulsf3+0x8>

000007f8 <__mulsf3_pse>:
 7f8:	95 9f       	mul	r25, r21
 7fa:	c1 f3       	breq	.-16     	; 0x7ec <__mulsf3+0x20>
 7fc:	95 0f       	add	r25, r21
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	55 1f       	adc	r21, r21
 802:	62 9f       	mul	r22, r18
 804:	f0 01       	movw	r30, r0
 806:	72 9f       	mul	r23, r18
 808:	bb 27       	eor	r27, r27
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	63 9f       	mul	r22, r19
 810:	aa 27       	eor	r26, r26
 812:	f0 0d       	add	r31, r0
 814:	b1 1d       	adc	r27, r1
 816:	aa 1f       	adc	r26, r26
 818:	64 9f       	mul	r22, r20
 81a:	66 27       	eor	r22, r22
 81c:	b0 0d       	add	r27, r0
 81e:	a1 1d       	adc	r26, r1
 820:	66 1f       	adc	r22, r22
 822:	82 9f       	mul	r24, r18
 824:	22 27       	eor	r18, r18
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	73 9f       	mul	r23, r19
 82e:	b0 0d       	add	r27, r0
 830:	a1 1d       	adc	r26, r1
 832:	62 1f       	adc	r22, r18
 834:	83 9f       	mul	r24, r19
 836:	a0 0d       	add	r26, r0
 838:	61 1d       	adc	r22, r1
 83a:	22 1f       	adc	r18, r18
 83c:	74 9f       	mul	r23, r20
 83e:	33 27       	eor	r19, r19
 840:	a0 0d       	add	r26, r0
 842:	61 1d       	adc	r22, r1
 844:	23 1f       	adc	r18, r19
 846:	84 9f       	mul	r24, r20
 848:	60 0d       	add	r22, r0
 84a:	21 1d       	adc	r18, r1
 84c:	82 2f       	mov	r24, r18
 84e:	76 2f       	mov	r23, r22
 850:	6a 2f       	mov	r22, r26
 852:	11 24       	eor	r1, r1
 854:	9f 57       	subi	r25, 0x7F	; 127
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	9a f0       	brmi	.+38     	; 0x880 <__mulsf3_pse+0x88>
 85a:	f1 f0       	breq	.+60     	; 0x898 <__mulsf3_pse+0xa0>
 85c:	88 23       	and	r24, r24
 85e:	4a f0       	brmi	.+18     	; 0x872 <__mulsf3_pse+0x7a>
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	bb 1f       	adc	r27, r27
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	91 50       	subi	r25, 0x01	; 1
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	a9 f7       	brne	.-22     	; 0x85c <__mulsf3_pse+0x64>
 872:	9e 3f       	cpi	r25, 0xFE	; 254
 874:	51 05       	cpc	r21, r1
 876:	80 f0       	brcs	.+32     	; 0x898 <__mulsf3_pse+0xa0>
 878:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_inf>
 87c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_szero>
 880:	5f 3f       	cpi	r21, 0xFF	; 255
 882:	e4 f3       	brlt	.-8      	; 0x87c <__mulsf3_pse+0x84>
 884:	98 3e       	cpi	r25, 0xE8	; 232
 886:	d4 f3       	brlt	.-12     	; 0x87c <__mulsf3_pse+0x84>
 888:	86 95       	lsr	r24
 88a:	77 95       	ror	r23
 88c:	67 95       	ror	r22
 88e:	b7 95       	ror	r27
 890:	f7 95       	ror	r31
 892:	e7 95       	ror	r30
 894:	9f 5f       	subi	r25, 0xFF	; 255
 896:	c1 f7       	brne	.-16     	; 0x888 <__mulsf3_pse+0x90>
 898:	fe 2b       	or	r31, r30
 89a:	88 0f       	add	r24, r24
 89c:	91 1d       	adc	r25, r1
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <strcat>:
 8a6:	fb 01       	movw	r30, r22
 8a8:	dc 01       	movw	r26, r24
 8aa:	0d 90       	ld	r0, X+
 8ac:	00 20       	and	r0, r0
 8ae:	e9 f7       	brne	.-6      	; 0x8aa <strcat+0x4>
 8b0:	11 97       	sbiw	r26, 0x01	; 1
 8b2:	01 90       	ld	r0, Z+
 8b4:	0d 92       	st	X+, r0
 8b6:	00 20       	and	r0, r0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <strcat+0xc>
 8ba:	08 95       	ret

000008bc <snprintf>:
 8bc:	ae e0       	ldi	r26, 0x0E	; 14
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e4 e6       	ldi	r30, 0x64	; 100
 8c2:	f4 e0       	ldi	r31, 0x04	; 4
 8c4:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__prologue_saves__+0x1c>
 8c8:	0d 89       	ldd	r16, Y+21	; 0x15
 8ca:	1e 89       	ldd	r17, Y+22	; 0x16
 8cc:	8f 89       	ldd	r24, Y+23	; 0x17
 8ce:	98 8d       	ldd	r25, Y+24	; 0x18
 8d0:	26 e0       	ldi	r18, 0x06	; 6
 8d2:	2c 83       	std	Y+4, r18	; 0x04
 8d4:	1a 83       	std	Y+2, r17	; 0x02
 8d6:	09 83       	std	Y+1, r16	; 0x01
 8d8:	97 ff       	sbrs	r25, 7
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <snprintf+0x24>
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e8       	ldi	r25, 0x80	; 128
 8e0:	01 97       	sbiw	r24, 0x01	; 1
 8e2:	9e 83       	std	Y+6, r25	; 0x06
 8e4:	8d 83       	std	Y+5, r24	; 0x05
 8e6:	ae 01       	movw	r20, r28
 8e8:	45 5e       	subi	r20, 0xE5	; 229
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	69 8d       	ldd	r22, Y+25	; 0x19
 8ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	0e 94 8e 04 	call	0x91c	; 0x91c <vfprintf>
 8f8:	4d 81       	ldd	r20, Y+5	; 0x05
 8fa:	5e 81       	ldd	r21, Y+6	; 0x06
 8fc:	57 fd       	sbrc	r21, 7
 8fe:	0a c0       	rjmp	.+20     	; 0x914 <__stack+0x15>
 900:	2f 81       	ldd	r18, Y+7	; 0x07
 902:	38 85       	ldd	r19, Y+8	; 0x08
 904:	42 17       	cp	r20, r18
 906:	53 07       	cpc	r21, r19
 908:	0c f4       	brge	.+2      	; 0x90c <__stack+0xd>
 90a:	9a 01       	movw	r18, r20
 90c:	f8 01       	movw	r30, r16
 90e:	e2 0f       	add	r30, r18
 910:	f3 1f       	adc	r31, r19
 912:	10 82       	st	Z, r1
 914:	2e 96       	adiw	r28, 0x0e	; 14
 916:	e4 e0       	ldi	r30, 0x04	; 4
 918:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__epilogue_restores__+0x1c>

0000091c <vfprintf>:
 91c:	ac e0       	ldi	r26, 0x0C	; 12
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	e4 e9       	ldi	r30, 0x94	; 148
 922:	f4 e0       	ldi	r31, 0x04	; 4
 924:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__prologue_saves__>
 928:	7c 01       	movw	r14, r24
 92a:	6b 01       	movw	r12, r22
 92c:	8a 01       	movw	r16, r20
 92e:	fc 01       	movw	r30, r24
 930:	17 82       	std	Z+7, r1	; 0x07
 932:	16 82       	std	Z+6, r1	; 0x06
 934:	83 81       	ldd	r24, Z+3	; 0x03
 936:	81 ff       	sbrs	r24, 1
 938:	bd c1       	rjmp	.+890    	; 0xcb4 <vfprintf+0x398>
 93a:	ce 01       	movw	r24, r28
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	4c 01       	movw	r8, r24
 940:	f7 01       	movw	r30, r14
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	f6 01       	movw	r30, r12
 946:	93 fd       	sbrc	r25, 3
 948:	85 91       	lpm	r24, Z+
 94a:	93 ff       	sbrs	r25, 3
 94c:	81 91       	ld	r24, Z+
 94e:	6f 01       	movw	r12, r30
 950:	88 23       	and	r24, r24
 952:	09 f4       	brne	.+2      	; 0x956 <vfprintf+0x3a>
 954:	ab c1       	rjmp	.+854    	; 0xcac <vfprintf+0x390>
 956:	85 32       	cpi	r24, 0x25	; 37
 958:	39 f4       	brne	.+14     	; 0x968 <vfprintf+0x4c>
 95a:	93 fd       	sbrc	r25, 3
 95c:	85 91       	lpm	r24, Z+
 95e:	93 ff       	sbrs	r25, 3
 960:	81 91       	ld	r24, Z+
 962:	6f 01       	movw	r12, r30
 964:	85 32       	cpi	r24, 0x25	; 37
 966:	29 f4       	brne	.+10     	; 0x972 <vfprintf+0x56>
 968:	b7 01       	movw	r22, r14
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 970:	e7 cf       	rjmp	.-50     	; 0x940 <vfprintf+0x24>
 972:	51 2c       	mov	r5, r1
 974:	31 2c       	mov	r3, r1
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	20 32       	cpi	r18, 0x20	; 32
 97a:	a0 f4       	brcc	.+40     	; 0x9a4 <vfprintf+0x88>
 97c:	8b 32       	cpi	r24, 0x2B	; 43
 97e:	69 f0       	breq	.+26     	; 0x99a <vfprintf+0x7e>
 980:	30 f4       	brcc	.+12     	; 0x98e <vfprintf+0x72>
 982:	80 32       	cpi	r24, 0x20	; 32
 984:	59 f0       	breq	.+22     	; 0x99c <vfprintf+0x80>
 986:	83 32       	cpi	r24, 0x23	; 35
 988:	69 f4       	brne	.+26     	; 0x9a4 <vfprintf+0x88>
 98a:	20 61       	ori	r18, 0x10	; 16
 98c:	2c c0       	rjmp	.+88     	; 0x9e6 <vfprintf+0xca>
 98e:	8d 32       	cpi	r24, 0x2D	; 45
 990:	39 f0       	breq	.+14     	; 0x9a0 <vfprintf+0x84>
 992:	80 33       	cpi	r24, 0x30	; 48
 994:	39 f4       	brne	.+14     	; 0x9a4 <vfprintf+0x88>
 996:	21 60       	ori	r18, 0x01	; 1
 998:	26 c0       	rjmp	.+76     	; 0x9e6 <vfprintf+0xca>
 99a:	22 60       	ori	r18, 0x02	; 2
 99c:	24 60       	ori	r18, 0x04	; 4
 99e:	23 c0       	rjmp	.+70     	; 0x9e6 <vfprintf+0xca>
 9a0:	28 60       	ori	r18, 0x08	; 8
 9a2:	21 c0       	rjmp	.+66     	; 0x9e6 <vfprintf+0xca>
 9a4:	27 fd       	sbrc	r18, 7
 9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <vfprintf+0xda>
 9a8:	30 ed       	ldi	r19, 0xD0	; 208
 9aa:	38 0f       	add	r19, r24
 9ac:	3a 30       	cpi	r19, 0x0A	; 10
 9ae:	78 f4       	brcc	.+30     	; 0x9ce <vfprintf+0xb2>
 9b0:	26 ff       	sbrs	r18, 6
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <vfprintf+0xa4>
 9b4:	fa e0       	ldi	r31, 0x0A	; 10
 9b6:	5f 9e       	mul	r5, r31
 9b8:	30 0d       	add	r19, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	53 2e       	mov	r5, r19
 9be:	13 c0       	rjmp	.+38     	; 0x9e6 <vfprintf+0xca>
 9c0:	8a e0       	ldi	r24, 0x0A	; 10
 9c2:	38 9e       	mul	r3, r24
 9c4:	30 0d       	add	r19, r0
 9c6:	11 24       	eor	r1, r1
 9c8:	33 2e       	mov	r3, r19
 9ca:	20 62       	ori	r18, 0x20	; 32
 9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <vfprintf+0xca>
 9ce:	8e 32       	cpi	r24, 0x2E	; 46
 9d0:	21 f4       	brne	.+8      	; 0x9da <vfprintf+0xbe>
 9d2:	26 fd       	sbrc	r18, 6
 9d4:	6b c1       	rjmp	.+726    	; 0xcac <vfprintf+0x390>
 9d6:	20 64       	ori	r18, 0x40	; 64
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <vfprintf+0xca>
 9da:	8c 36       	cpi	r24, 0x6C	; 108
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <vfprintf+0xc6>
 9de:	20 68       	ori	r18, 0x80	; 128
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <vfprintf+0xca>
 9e2:	88 36       	cpi	r24, 0x68	; 104
 9e4:	41 f4       	brne	.+16     	; 0x9f6 <vfprintf+0xda>
 9e6:	f6 01       	movw	r30, r12
 9e8:	93 fd       	sbrc	r25, 3
 9ea:	85 91       	lpm	r24, Z+
 9ec:	93 ff       	sbrs	r25, 3
 9ee:	81 91       	ld	r24, Z+
 9f0:	6f 01       	movw	r12, r30
 9f2:	81 11       	cpse	r24, r1
 9f4:	c1 cf       	rjmp	.-126    	; 0x978 <vfprintf+0x5c>
 9f6:	98 2f       	mov	r25, r24
 9f8:	9f 7d       	andi	r25, 0xDF	; 223
 9fa:	95 54       	subi	r25, 0x45	; 69
 9fc:	93 30       	cpi	r25, 0x03	; 3
 9fe:	28 f4       	brcc	.+10     	; 0xa0a <vfprintf+0xee>
 a00:	0c 5f       	subi	r16, 0xFC	; 252
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	ff e3       	ldi	r31, 0x3F	; 63
 a06:	f9 83       	std	Y+1, r31	; 0x01
 a08:	0d c0       	rjmp	.+26     	; 0xa24 <vfprintf+0x108>
 a0a:	83 36       	cpi	r24, 0x63	; 99
 a0c:	31 f0       	breq	.+12     	; 0xa1a <vfprintf+0xfe>
 a0e:	83 37       	cpi	r24, 0x73	; 115
 a10:	71 f0       	breq	.+28     	; 0xa2e <vfprintf+0x112>
 a12:	83 35       	cpi	r24, 0x53	; 83
 a14:	09 f0       	breq	.+2      	; 0xa18 <vfprintf+0xfc>
 a16:	5b c0       	rjmp	.+182    	; 0xace <vfprintf+0x1b2>
 a18:	22 c0       	rjmp	.+68     	; 0xa5e <vfprintf+0x142>
 a1a:	f8 01       	movw	r30, r16
 a1c:	80 81       	ld	r24, Z
 a1e:	89 83       	std	Y+1, r24	; 0x01
 a20:	0e 5f       	subi	r16, 0xFE	; 254
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	44 24       	eor	r4, r4
 a26:	43 94       	inc	r4
 a28:	51 2c       	mov	r5, r1
 a2a:	54 01       	movw	r10, r8
 a2c:	15 c0       	rjmp	.+42     	; 0xa58 <vfprintf+0x13c>
 a2e:	38 01       	movw	r6, r16
 a30:	f2 e0       	ldi	r31, 0x02	; 2
 a32:	6f 0e       	add	r6, r31
 a34:	71 1c       	adc	r7, r1
 a36:	f8 01       	movw	r30, r16
 a38:	a0 80       	ld	r10, Z
 a3a:	b1 80       	ldd	r11, Z+1	; 0x01
 a3c:	26 ff       	sbrs	r18, 6
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <vfprintf+0x12a>
 a40:	65 2d       	mov	r22, r5
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <vfprintf+0x12e>
 a46:	6f ef       	ldi	r22, 0xFF	; 255
 a48:	7f ef       	ldi	r23, 0xFF	; 255
 a4a:	c5 01       	movw	r24, r10
 a4c:	2c 87       	std	Y+12, r18	; 0x0c
 a4e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <strnlen>
 a52:	2c 01       	movw	r4, r24
 a54:	83 01       	movw	r16, r6
 a56:	2c 85       	ldd	r18, Y+12	; 0x0c
 a58:	2f 77       	andi	r18, 0x7F	; 127
 a5a:	22 2e       	mov	r2, r18
 a5c:	17 c0       	rjmp	.+46     	; 0xa8c <vfprintf+0x170>
 a5e:	38 01       	movw	r6, r16
 a60:	f2 e0       	ldi	r31, 0x02	; 2
 a62:	6f 0e       	add	r6, r31
 a64:	71 1c       	adc	r7, r1
 a66:	f8 01       	movw	r30, r16
 a68:	a0 80       	ld	r10, Z
 a6a:	b1 80       	ldd	r11, Z+1	; 0x01
 a6c:	26 ff       	sbrs	r18, 6
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x15a>
 a70:	65 2d       	mov	r22, r5
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x15e>
 a76:	6f ef       	ldi	r22, 0xFF	; 255
 a78:	7f ef       	ldi	r23, 0xFF	; 255
 a7a:	c5 01       	movw	r24, r10
 a7c:	2c 87       	std	Y+12, r18	; 0x0c
 a7e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <strnlen_P>
 a82:	2c 01       	movw	r4, r24
 a84:	2c 85       	ldd	r18, Y+12	; 0x0c
 a86:	20 68       	ori	r18, 0x80	; 128
 a88:	22 2e       	mov	r2, r18
 a8a:	83 01       	movw	r16, r6
 a8c:	23 fc       	sbrc	r2, 3
 a8e:	1b c0       	rjmp	.+54     	; 0xac6 <vfprintf+0x1aa>
 a90:	83 2d       	mov	r24, r3
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	48 16       	cp	r4, r24
 a96:	59 06       	cpc	r5, r25
 a98:	b0 f4       	brcc	.+44     	; 0xac6 <vfprintf+0x1aa>
 a9a:	b7 01       	movw	r22, r14
 a9c:	80 e2       	ldi	r24, 0x20	; 32
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 aa4:	3a 94       	dec	r3
 aa6:	f4 cf       	rjmp	.-24     	; 0xa90 <vfprintf+0x174>
 aa8:	f5 01       	movw	r30, r10
 aaa:	27 fc       	sbrc	r2, 7
 aac:	85 91       	lpm	r24, Z+
 aae:	27 fe       	sbrs	r2, 7
 ab0:	81 91       	ld	r24, Z+
 ab2:	5f 01       	movw	r10, r30
 ab4:	b7 01       	movw	r22, r14
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 abc:	31 10       	cpse	r3, r1
 abe:	3a 94       	dec	r3
 ac0:	f1 e0       	ldi	r31, 0x01	; 1
 ac2:	4f 1a       	sub	r4, r31
 ac4:	51 08       	sbc	r5, r1
 ac6:	41 14       	cp	r4, r1
 ac8:	51 04       	cpc	r5, r1
 aca:	71 f7       	brne	.-36     	; 0xaa8 <vfprintf+0x18c>
 acc:	e5 c0       	rjmp	.+458    	; 0xc98 <vfprintf+0x37c>
 ace:	84 36       	cpi	r24, 0x64	; 100
 ad0:	11 f0       	breq	.+4      	; 0xad6 <vfprintf+0x1ba>
 ad2:	89 36       	cpi	r24, 0x69	; 105
 ad4:	39 f5       	brne	.+78     	; 0xb24 <vfprintf+0x208>
 ad6:	f8 01       	movw	r30, r16
 ad8:	27 ff       	sbrs	r18, 7
 ada:	07 c0       	rjmp	.+14     	; 0xaea <vfprintf+0x1ce>
 adc:	60 81       	ld	r22, Z
 ade:	71 81       	ldd	r23, Z+1	; 0x01
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	93 81       	ldd	r25, Z+3	; 0x03
 ae4:	0c 5f       	subi	r16, 0xFC	; 252
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <vfprintf+0x1de>
 aea:	60 81       	ld	r22, Z
 aec:	71 81       	ldd	r23, Z+1	; 0x01
 aee:	07 2e       	mov	r0, r23
 af0:	00 0c       	add	r0, r0
 af2:	88 0b       	sbc	r24, r24
 af4:	99 0b       	sbc	r25, r25
 af6:	0e 5f       	subi	r16, 0xFE	; 254
 af8:	1f 4f       	sbci	r17, 0xFF	; 255
 afa:	2f 76       	andi	r18, 0x6F	; 111
 afc:	72 2e       	mov	r7, r18
 afe:	97 ff       	sbrs	r25, 7
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <vfprintf+0x1f8>
 b02:	90 95       	com	r25
 b04:	80 95       	com	r24
 b06:	70 95       	com	r23
 b08:	61 95       	neg	r22
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	20 68       	ori	r18, 0x80	; 128
 b12:	72 2e       	mov	r7, r18
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	a4 01       	movw	r20, r8
 b1a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__ultoa_invert>
 b1e:	a8 2e       	mov	r10, r24
 b20:	a8 18       	sub	r10, r8
 b22:	44 c0       	rjmp	.+136    	; 0xbac <vfprintf+0x290>
 b24:	85 37       	cpi	r24, 0x75	; 117
 b26:	29 f4       	brne	.+10     	; 0xb32 <vfprintf+0x216>
 b28:	2f 7e       	andi	r18, 0xEF	; 239
 b2a:	b2 2e       	mov	r11, r18
 b2c:	2a e0       	ldi	r18, 0x0A	; 10
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	25 c0       	rjmp	.+74     	; 0xb7c <vfprintf+0x260>
 b32:	f2 2f       	mov	r31, r18
 b34:	f9 7f       	andi	r31, 0xF9	; 249
 b36:	bf 2e       	mov	r11, r31
 b38:	8f 36       	cpi	r24, 0x6F	; 111
 b3a:	c1 f0       	breq	.+48     	; 0xb6c <vfprintf+0x250>
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <vfprintf+0x228>
 b3e:	88 35       	cpi	r24, 0x58	; 88
 b40:	79 f0       	breq	.+30     	; 0xb60 <vfprintf+0x244>
 b42:	b4 c0       	rjmp	.+360    	; 0xcac <vfprintf+0x390>
 b44:	80 37       	cpi	r24, 0x70	; 112
 b46:	19 f0       	breq	.+6      	; 0xb4e <vfprintf+0x232>
 b48:	88 37       	cpi	r24, 0x78	; 120
 b4a:	21 f0       	breq	.+8      	; 0xb54 <vfprintf+0x238>
 b4c:	af c0       	rjmp	.+350    	; 0xcac <vfprintf+0x390>
 b4e:	2f 2f       	mov	r18, r31
 b50:	20 61       	ori	r18, 0x10	; 16
 b52:	b2 2e       	mov	r11, r18
 b54:	b4 fe       	sbrs	r11, 4
 b56:	0d c0       	rjmp	.+26     	; 0xb72 <vfprintf+0x256>
 b58:	8b 2d       	mov	r24, r11
 b5a:	84 60       	ori	r24, 0x04	; 4
 b5c:	b8 2e       	mov	r11, r24
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <vfprintf+0x256>
 b60:	24 ff       	sbrs	r18, 4
 b62:	0a c0       	rjmp	.+20     	; 0xb78 <vfprintf+0x25c>
 b64:	9f 2f       	mov	r25, r31
 b66:	96 60       	ori	r25, 0x06	; 6
 b68:	b9 2e       	mov	r11, r25
 b6a:	06 c0       	rjmp	.+12     	; 0xb78 <vfprintf+0x25c>
 b6c:	28 e0       	ldi	r18, 0x08	; 8
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	05 c0       	rjmp	.+10     	; 0xb7c <vfprintf+0x260>
 b72:	20 e1       	ldi	r18, 0x10	; 16
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <vfprintf+0x260>
 b78:	20 e1       	ldi	r18, 0x10	; 16
 b7a:	32 e0       	ldi	r19, 0x02	; 2
 b7c:	f8 01       	movw	r30, r16
 b7e:	b7 fe       	sbrs	r11, 7
 b80:	07 c0       	rjmp	.+14     	; 0xb90 <vfprintf+0x274>
 b82:	60 81       	ld	r22, Z
 b84:	71 81       	ldd	r23, Z+1	; 0x01
 b86:	82 81       	ldd	r24, Z+2	; 0x02
 b88:	93 81       	ldd	r25, Z+3	; 0x03
 b8a:	0c 5f       	subi	r16, 0xFC	; 252
 b8c:	1f 4f       	sbci	r17, 0xFF	; 255
 b8e:	06 c0       	rjmp	.+12     	; 0xb9c <vfprintf+0x280>
 b90:	60 81       	ld	r22, Z
 b92:	71 81       	ldd	r23, Z+1	; 0x01
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 5f       	subi	r16, 0xFE	; 254
 b9a:	1f 4f       	sbci	r17, 0xFF	; 255
 b9c:	a4 01       	movw	r20, r8
 b9e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__ultoa_invert>
 ba2:	a8 2e       	mov	r10, r24
 ba4:	a8 18       	sub	r10, r8
 ba6:	fb 2d       	mov	r31, r11
 ba8:	ff 77       	andi	r31, 0x7F	; 127
 baa:	7f 2e       	mov	r7, r31
 bac:	76 fe       	sbrs	r7, 6
 bae:	0b c0       	rjmp	.+22     	; 0xbc6 <vfprintf+0x2aa>
 bb0:	37 2d       	mov	r19, r7
 bb2:	3e 7f       	andi	r19, 0xFE	; 254
 bb4:	a5 14       	cp	r10, r5
 bb6:	50 f4       	brcc	.+20     	; 0xbcc <vfprintf+0x2b0>
 bb8:	74 fe       	sbrs	r7, 4
 bba:	0a c0       	rjmp	.+20     	; 0xbd0 <vfprintf+0x2b4>
 bbc:	72 fc       	sbrc	r7, 2
 bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <vfprintf+0x2b4>
 bc0:	37 2d       	mov	r19, r7
 bc2:	3e 7e       	andi	r19, 0xEE	; 238
 bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <vfprintf+0x2b4>
 bc6:	ba 2c       	mov	r11, r10
 bc8:	37 2d       	mov	r19, r7
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <vfprintf+0x2b6>
 bcc:	ba 2c       	mov	r11, r10
 bce:	01 c0       	rjmp	.+2      	; 0xbd2 <vfprintf+0x2b6>
 bd0:	b5 2c       	mov	r11, r5
 bd2:	34 ff       	sbrs	r19, 4
 bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <vfprintf+0x2d4>
 bd6:	fe 01       	movw	r30, r28
 bd8:	ea 0d       	add	r30, r10
 bda:	f1 1d       	adc	r31, r1
 bdc:	80 81       	ld	r24, Z
 bde:	80 33       	cpi	r24, 0x30	; 48
 be0:	11 f4       	brne	.+4      	; 0xbe6 <vfprintf+0x2ca>
 be2:	39 7e       	andi	r19, 0xE9	; 233
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <vfprintf+0x2dc>
 be6:	32 ff       	sbrs	r19, 2
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <vfprintf+0x2da>
 bea:	b3 94       	inc	r11
 bec:	b3 94       	inc	r11
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <vfprintf+0x2dc>
 bf0:	83 2f       	mov	r24, r19
 bf2:	86 78       	andi	r24, 0x86	; 134
 bf4:	09 f0       	breq	.+2      	; 0xbf8 <vfprintf+0x2dc>
 bf6:	b3 94       	inc	r11
 bf8:	33 fd       	sbrc	r19, 3
 bfa:	13 c0       	rjmp	.+38     	; 0xc22 <vfprintf+0x306>
 bfc:	30 ff       	sbrs	r19, 0
 bfe:	06 c0       	rjmp	.+12     	; 0xc0c <vfprintf+0x2f0>
 c00:	5a 2c       	mov	r5, r10
 c02:	b3 14       	cp	r11, r3
 c04:	18 f4       	brcc	.+6      	; 0xc0c <vfprintf+0x2f0>
 c06:	53 0c       	add	r5, r3
 c08:	5b 18       	sub	r5, r11
 c0a:	b3 2c       	mov	r11, r3
 c0c:	b3 14       	cp	r11, r3
 c0e:	68 f4       	brcc	.+26     	; 0xc2a <vfprintf+0x30e>
 c10:	b7 01       	movw	r22, r14
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	3c 87       	std	Y+12, r19	; 0x0c
 c18:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 c1c:	b3 94       	inc	r11
 c1e:	3c 85       	ldd	r19, Y+12	; 0x0c
 c20:	f5 cf       	rjmp	.-22     	; 0xc0c <vfprintf+0x2f0>
 c22:	b3 14       	cp	r11, r3
 c24:	10 f4       	brcc	.+4      	; 0xc2a <vfprintf+0x30e>
 c26:	3b 18       	sub	r3, r11
 c28:	01 c0       	rjmp	.+2      	; 0xc2c <vfprintf+0x310>
 c2a:	31 2c       	mov	r3, r1
 c2c:	34 ff       	sbrs	r19, 4
 c2e:	12 c0       	rjmp	.+36     	; 0xc54 <vfprintf+0x338>
 c30:	b7 01       	movw	r22, r14
 c32:	80 e3       	ldi	r24, 0x30	; 48
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	3c 87       	std	Y+12, r19	; 0x0c
 c38:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 c3c:	3c 85       	ldd	r19, Y+12	; 0x0c
 c3e:	32 ff       	sbrs	r19, 2
 c40:	17 c0       	rjmp	.+46     	; 0xc70 <vfprintf+0x354>
 c42:	31 fd       	sbrc	r19, 1
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <vfprintf+0x330>
 c46:	88 e7       	ldi	r24, 0x78	; 120
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x334>
 c4c:	88 e5       	ldi	r24, 0x58	; 88
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	b7 01       	movw	r22, r14
 c52:	0c c0       	rjmp	.+24     	; 0xc6c <vfprintf+0x350>
 c54:	83 2f       	mov	r24, r19
 c56:	86 78       	andi	r24, 0x86	; 134
 c58:	59 f0       	breq	.+22     	; 0xc70 <vfprintf+0x354>
 c5a:	31 ff       	sbrs	r19, 1
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x346>
 c5e:	8b e2       	ldi	r24, 0x2B	; 43
 c60:	01 c0       	rjmp	.+2      	; 0xc64 <vfprintf+0x348>
 c62:	80 e2       	ldi	r24, 0x20	; 32
 c64:	37 fd       	sbrc	r19, 7
 c66:	8d e2       	ldi	r24, 0x2D	; 45
 c68:	b7 01       	movw	r22, r14
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 c70:	a5 14       	cp	r10, r5
 c72:	38 f4       	brcc	.+14     	; 0xc82 <vfprintf+0x366>
 c74:	b7 01       	movw	r22, r14
 c76:	80 e3       	ldi	r24, 0x30	; 48
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 c7e:	5a 94       	dec	r5
 c80:	f7 cf       	rjmp	.-18     	; 0xc70 <vfprintf+0x354>
 c82:	aa 94       	dec	r10
 c84:	f4 01       	movw	r30, r8
 c86:	ea 0d       	add	r30, r10
 c88:	f1 1d       	adc	r31, r1
 c8a:	80 81       	ld	r24, Z
 c8c:	b7 01       	movw	r22, r14
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 c94:	a1 10       	cpse	r10, r1
 c96:	f5 cf       	rjmp	.-22     	; 0xc82 <vfprintf+0x366>
 c98:	33 20       	and	r3, r3
 c9a:	09 f4       	brne	.+2      	; 0xc9e <vfprintf+0x382>
 c9c:	51 ce       	rjmp	.-862    	; 0x940 <vfprintf+0x24>
 c9e:	b7 01       	movw	r22, r14
 ca0:	80 e2       	ldi	r24, 0x20	; 32
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	0e 94 76 06 	call	0xcec	; 0xcec <fputc>
 ca8:	3a 94       	dec	r3
 caa:	f6 cf       	rjmp	.-20     	; 0xc98 <vfprintf+0x37c>
 cac:	f7 01       	movw	r30, r14
 cae:	86 81       	ldd	r24, Z+6	; 0x06
 cb0:	97 81       	ldd	r25, Z+7	; 0x07
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x39c>
 cb4:	8f ef       	ldi	r24, 0xFF	; 255
 cb6:	9f ef       	ldi	r25, 0xFF	; 255
 cb8:	2c 96       	adiw	r28, 0x0c	; 12
 cba:	e2 e1       	ldi	r30, 0x12	; 18
 cbc:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__epilogue_restores__>

00000cc0 <strnlen_P>:
 cc0:	fc 01       	movw	r30, r24
 cc2:	05 90       	lpm	r0, Z+
 cc4:	61 50       	subi	r22, 0x01	; 1
 cc6:	70 40       	sbci	r23, 0x00	; 0
 cc8:	01 10       	cpse	r0, r1
 cca:	d8 f7       	brcc	.-10     	; 0xcc2 <strnlen_P+0x2>
 ccc:	80 95       	com	r24
 cce:	90 95       	com	r25
 cd0:	8e 0f       	add	r24, r30
 cd2:	9f 1f       	adc	r25, r31
 cd4:	08 95       	ret

00000cd6 <strnlen>:
 cd6:	fc 01       	movw	r30, r24
 cd8:	61 50       	subi	r22, 0x01	; 1
 cda:	70 40       	sbci	r23, 0x00	; 0
 cdc:	01 90       	ld	r0, Z+
 cde:	01 10       	cpse	r0, r1
 ce0:	d8 f7       	brcc	.-10     	; 0xcd8 <strnlen+0x2>
 ce2:	80 95       	com	r24
 ce4:	90 95       	com	r25
 ce6:	8e 0f       	add	r24, r30
 ce8:	9f 1f       	adc	r25, r31
 cea:	08 95       	ret

00000cec <fputc>:
 cec:	0f 93       	push	r16
 cee:	1f 93       	push	r17
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	fb 01       	movw	r30, r22
 cf6:	23 81       	ldd	r18, Z+3	; 0x03
 cf8:	21 fd       	sbrc	r18, 1
 cfa:	03 c0       	rjmp	.+6      	; 0xd02 <fputc+0x16>
 cfc:	8f ef       	ldi	r24, 0xFF	; 255
 cfe:	9f ef       	ldi	r25, 0xFF	; 255
 d00:	28 c0       	rjmp	.+80     	; 0xd52 <fputc+0x66>
 d02:	22 ff       	sbrs	r18, 2
 d04:	16 c0       	rjmp	.+44     	; 0xd32 <fputc+0x46>
 d06:	46 81       	ldd	r20, Z+6	; 0x06
 d08:	57 81       	ldd	r21, Z+7	; 0x07
 d0a:	24 81       	ldd	r18, Z+4	; 0x04
 d0c:	35 81       	ldd	r19, Z+5	; 0x05
 d0e:	42 17       	cp	r20, r18
 d10:	53 07       	cpc	r21, r19
 d12:	44 f4       	brge	.+16     	; 0xd24 <fputc+0x38>
 d14:	a0 81       	ld	r26, Z
 d16:	b1 81       	ldd	r27, Z+1	; 0x01
 d18:	9d 01       	movw	r18, r26
 d1a:	2f 5f       	subi	r18, 0xFF	; 255
 d1c:	3f 4f       	sbci	r19, 0xFF	; 255
 d1e:	31 83       	std	Z+1, r19	; 0x01
 d20:	20 83       	st	Z, r18
 d22:	8c 93       	st	X, r24
 d24:	26 81       	ldd	r18, Z+6	; 0x06
 d26:	37 81       	ldd	r19, Z+7	; 0x07
 d28:	2f 5f       	subi	r18, 0xFF	; 255
 d2a:	3f 4f       	sbci	r19, 0xFF	; 255
 d2c:	37 83       	std	Z+7, r19	; 0x07
 d2e:	26 83       	std	Z+6, r18	; 0x06
 d30:	10 c0       	rjmp	.+32     	; 0xd52 <fputc+0x66>
 d32:	eb 01       	movw	r28, r22
 d34:	09 2f       	mov	r16, r25
 d36:	18 2f       	mov	r17, r24
 d38:	00 84       	ldd	r0, Z+8	; 0x08
 d3a:	f1 85       	ldd	r31, Z+9	; 0x09
 d3c:	e0 2d       	mov	r30, r0
 d3e:	09 95       	icall
 d40:	89 2b       	or	r24, r25
 d42:	e1 f6       	brne	.-72     	; 0xcfc <fputc+0x10>
 d44:	8e 81       	ldd	r24, Y+6	; 0x06
 d46:	9f 81       	ldd	r25, Y+7	; 0x07
 d48:	01 96       	adiw	r24, 0x01	; 1
 d4a:	9f 83       	std	Y+7, r25	; 0x07
 d4c:	8e 83       	std	Y+6, r24	; 0x06
 d4e:	81 2f       	mov	r24, r17
 d50:	90 2f       	mov	r25, r16
 d52:	df 91       	pop	r29
 d54:	cf 91       	pop	r28
 d56:	1f 91       	pop	r17
 d58:	0f 91       	pop	r16
 d5a:	08 95       	ret

00000d5c <__ultoa_invert>:
 d5c:	fa 01       	movw	r30, r20
 d5e:	aa 27       	eor	r26, r26
 d60:	28 30       	cpi	r18, 0x08	; 8
 d62:	51 f1       	breq	.+84     	; 0xdb8 <__ultoa_invert+0x5c>
 d64:	20 31       	cpi	r18, 0x10	; 16
 d66:	81 f1       	breq	.+96     	; 0xdc8 <__ultoa_invert+0x6c>
 d68:	e8 94       	clt
 d6a:	6f 93       	push	r22
 d6c:	6e 7f       	andi	r22, 0xFE	; 254
 d6e:	6e 5f       	subi	r22, 0xFE	; 254
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	af 4f       	sbci	r26, 0xFF	; 255
 d78:	b1 e0       	ldi	r27, 0x01	; 1
 d7a:	3e d0       	rcall	.+124    	; 0xdf8 <__ultoa_invert+0x9c>
 d7c:	b4 e0       	ldi	r27, 0x04	; 4
 d7e:	3c d0       	rcall	.+120    	; 0xdf8 <__ultoa_invert+0x9c>
 d80:	67 0f       	add	r22, r23
 d82:	78 1f       	adc	r23, r24
 d84:	89 1f       	adc	r24, r25
 d86:	9a 1f       	adc	r25, r26
 d88:	a1 1d       	adc	r26, r1
 d8a:	68 0f       	add	r22, r24
 d8c:	79 1f       	adc	r23, r25
 d8e:	8a 1f       	adc	r24, r26
 d90:	91 1d       	adc	r25, r1
 d92:	a1 1d       	adc	r26, r1
 d94:	6a 0f       	add	r22, r26
 d96:	71 1d       	adc	r23, r1
 d98:	81 1d       	adc	r24, r1
 d9a:	91 1d       	adc	r25, r1
 d9c:	a1 1d       	adc	r26, r1
 d9e:	20 d0       	rcall	.+64     	; 0xde0 <__ultoa_invert+0x84>
 da0:	09 f4       	brne	.+2      	; 0xda4 <__ultoa_invert+0x48>
 da2:	68 94       	set
 da4:	3f 91       	pop	r19
 da6:	2a e0       	ldi	r18, 0x0A	; 10
 da8:	26 9f       	mul	r18, r22
 daa:	11 24       	eor	r1, r1
 dac:	30 19       	sub	r19, r0
 dae:	30 5d       	subi	r19, 0xD0	; 208
 db0:	31 93       	st	Z+, r19
 db2:	de f6       	brtc	.-74     	; 0xd6a <__ultoa_invert+0xe>
 db4:	cf 01       	movw	r24, r30
 db6:	08 95       	ret
 db8:	46 2f       	mov	r20, r22
 dba:	47 70       	andi	r20, 0x07	; 7
 dbc:	40 5d       	subi	r20, 0xD0	; 208
 dbe:	41 93       	st	Z+, r20
 dc0:	b3 e0       	ldi	r27, 0x03	; 3
 dc2:	0f d0       	rcall	.+30     	; 0xde2 <__ultoa_invert+0x86>
 dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__ultoa_invert+0x5c>
 dc6:	f6 cf       	rjmp	.-20     	; 0xdb4 <__ultoa_invert+0x58>
 dc8:	46 2f       	mov	r20, r22
 dca:	4f 70       	andi	r20, 0x0F	; 15
 dcc:	40 5d       	subi	r20, 0xD0	; 208
 dce:	4a 33       	cpi	r20, 0x3A	; 58
 dd0:	18 f0       	brcs	.+6      	; 0xdd8 <__ultoa_invert+0x7c>
 dd2:	49 5d       	subi	r20, 0xD9	; 217
 dd4:	31 fd       	sbrc	r19, 1
 dd6:	40 52       	subi	r20, 0x20	; 32
 dd8:	41 93       	st	Z+, r20
 dda:	02 d0       	rcall	.+4      	; 0xde0 <__ultoa_invert+0x84>
 ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__ultoa_invert+0x6c>
 dde:	ea cf       	rjmp	.-44     	; 0xdb4 <__ultoa_invert+0x58>
 de0:	b4 e0       	ldi	r27, 0x04	; 4
 de2:	a6 95       	lsr	r26
 de4:	97 95       	ror	r25
 de6:	87 95       	ror	r24
 de8:	77 95       	ror	r23
 dea:	67 95       	ror	r22
 dec:	ba 95       	dec	r27
 dee:	c9 f7       	brne	.-14     	; 0xde2 <__ultoa_invert+0x86>
 df0:	00 97       	sbiw	r24, 0x00	; 0
 df2:	61 05       	cpc	r22, r1
 df4:	71 05       	cpc	r23, r1
 df6:	08 95       	ret
 df8:	9b 01       	movw	r18, r22
 dfa:	ac 01       	movw	r20, r24
 dfc:	0a 2e       	mov	r0, r26
 dfe:	06 94       	lsr	r0
 e00:	57 95       	ror	r21
 e02:	47 95       	ror	r20
 e04:	37 95       	ror	r19
 e06:	27 95       	ror	r18
 e08:	ba 95       	dec	r27
 e0a:	c9 f7       	brne	.-14     	; 0xdfe <__ultoa_invert+0xa2>
 e0c:	62 0f       	add	r22, r18
 e0e:	73 1f       	adc	r23, r19
 e10:	84 1f       	adc	r24, r20
 e12:	95 1f       	adc	r25, r21
 e14:	a0 1d       	adc	r26, r0
 e16:	08 95       	ret

00000e18 <__prologue_saves__>:
 e18:	2f 92       	push	r2
 e1a:	3f 92       	push	r3
 e1c:	4f 92       	push	r4
 e1e:	5f 92       	push	r5
 e20:	6f 92       	push	r6
 e22:	7f 92       	push	r7
 e24:	8f 92       	push	r8
 e26:	9f 92       	push	r9
 e28:	af 92       	push	r10
 e2a:	bf 92       	push	r11
 e2c:	cf 92       	push	r12
 e2e:	df 92       	push	r13
 e30:	ef 92       	push	r14
 e32:	ff 92       	push	r15
 e34:	0f 93       	push	r16
 e36:	1f 93       	push	r17
 e38:	cf 93       	push	r28
 e3a:	df 93       	push	r29
 e3c:	cd b7       	in	r28, 0x3d	; 61
 e3e:	de b7       	in	r29, 0x3e	; 62
 e40:	ca 1b       	sub	r28, r26
 e42:	db 0b       	sbc	r29, r27
 e44:	0f b6       	in	r0, 0x3f	; 63
 e46:	f8 94       	cli
 e48:	de bf       	out	0x3e, r29	; 62
 e4a:	0f be       	out	0x3f, r0	; 63
 e4c:	cd bf       	out	0x3d, r28	; 61
 e4e:	09 94       	ijmp

00000e50 <__epilogue_restores__>:
 e50:	2a 88       	ldd	r2, Y+18	; 0x12
 e52:	39 88       	ldd	r3, Y+17	; 0x11
 e54:	48 88       	ldd	r4, Y+16	; 0x10
 e56:	5f 84       	ldd	r5, Y+15	; 0x0f
 e58:	6e 84       	ldd	r6, Y+14	; 0x0e
 e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e60:	aa 84       	ldd	r10, Y+10	; 0x0a
 e62:	b9 84       	ldd	r11, Y+9	; 0x09
 e64:	c8 84       	ldd	r12, Y+8	; 0x08
 e66:	df 80       	ldd	r13, Y+7	; 0x07
 e68:	ee 80       	ldd	r14, Y+6	; 0x06
 e6a:	fd 80       	ldd	r15, Y+5	; 0x05
 e6c:	0c 81       	ldd	r16, Y+4	; 0x04
 e6e:	1b 81       	ldd	r17, Y+3	; 0x03
 e70:	aa 81       	ldd	r26, Y+2	; 0x02
 e72:	b9 81       	ldd	r27, Y+1	; 0x01
 e74:	ce 0f       	add	r28, r30
 e76:	d1 1d       	adc	r29, r1
 e78:	0f b6       	in	r0, 0x3f	; 63
 e7a:	f8 94       	cli
 e7c:	de bf       	out	0x3e, r29	; 62
 e7e:	0f be       	out	0x3f, r0	; 63
 e80:	cd bf       	out	0x3d, r28	; 61
 e82:	ed 01       	movw	r28, r26
 e84:	08 95       	ret

00000e86 <_exit>:
 e86:	f8 94       	cli

00000e88 <__stop_program>:
 e88:	ff cf       	rjmp	.-2      	; 0xe88 <__stop_program>
